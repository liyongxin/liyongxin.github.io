<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: python | Earlene]]></title>
  <link href="http://liyongxin.github.io/blog/categories/python/atom.xml" rel="self"/>
  <link href="http://liyongxin.github.io/"/>
  <updated>2019-04-03T17:36:26+08:00</updated>
  <id>http://liyongxin.github.io/</id>
  <author>
    <name><![CDATA[yxli@alauda.io]]></name>
    <email><![CDATA[yxli@alauda.io]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[supervisord 管理nginx app]]></title>
    <link href="http://liyongxin.github.io/blog/2019/03/15/supervisord-guan-li-nginx-app/"/>
    <updated>2019-03-15T10:47:18+08:00</updated>
    <id>http://liyongxin.github.io/blog/2019/03/15/supervisord-guan-li-nginx-app</id>
    <content type="html"><![CDATA[<p>在使用supervisord管理nginx的时候，发现nginx提示端口占用后异常退出，
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="mi">2019</span><span class="o">-</span><span class="mo">03</span><span class="o">-</span><span class="mi">15</span> <span class="mo">02</span><span class="p">:</span><span class="mi">36</span><span class="p">:</span><span class="mi">37</span><span class="p">,</span><span class="mi">587</span> <span class="n">INFO</span> <span class="n">RPC</span> <span class="n">interface</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">supervisor</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="n">initialized</span>
<span class="mi">2019</span><span class="o">-</span><span class="mo">03</span><span class="o">-</span><span class="mi">15</span> <span class="mo">02</span><span class="p">:</span><span class="mi">36</span><span class="p">:</span><span class="mi">37</span><span class="p">,</span><span class="mi">587</span> <span class="n">CRIT</span> <span class="n">Server</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">unix_http_server</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="n">running</span> <span class="n">without</span> <span class="nb">any</span> <span class="n">HTTP</span> <span class="n">authentication</span> <span class="n">checking</span>
<span class="mi">2019</span><span class="o">-</span><span class="mo">03</span><span class="o">-</span><span class="mi">15</span> <span class="mo">02</span><span class="p">:</span><span class="mi">36</span><span class="p">:</span><span class="mi">37</span><span class="p">,</span><span class="mi">588</span> <span class="n">INFO</span> <span class="n">supervisord</span> <span class="n">started</span> <span class="k">with</span> <span class="n">pid</span> <span class="mi">9662</span>
<span class="mi">2019</span><span class="o">-</span><span class="mo">03</span><span class="o">-</span><span class="mi">15</span> <span class="mo">02</span><span class="p">:</span><span class="mi">36</span><span class="p">:</span><span class="mi">38</span><span class="p">,</span><span class="mi">591</span> <span class="n">INFO</span> <span class="n">spawned</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">nginx</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="k">with</span> <span class="n">pid</span> <span class="mi">9664</span>
<span class="mi">2019</span><span class="o">-</span><span class="mo">03</span><span class="o">-</span><span class="mi">15</span> <span class="mo">02</span><span class="p">:</span><span class="mi">36</span><span class="p">:</span><span class="mi">38</span><span class="p">,</span><span class="mi">595</span> <span class="n">INFO</span> <span class="n">spawned</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">app</span><span class="o">-</span><span class="n">gunicorn</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="k">with</span> <span class="n">pid</span> <span class="mi">9665</span>
<span class="mi">2019</span><span class="o">-</span><span class="mo">03</span><span class="o">-</span><span class="mi">15</span> <span class="mo">02</span><span class="p">:</span><span class="mi">36</span><span class="p">:</span><span class="mi">38</span><span class="p">,</span><span class="mi">616</span> <span class="n">INFO</span> <span class="n">exited</span><span class="p">:</span> <span class="n">nginx</span> <span class="p">(</span><span class="nb">exit</span> <span class="n">status</span> <span class="mi">0</span><span class="p">;</span> <span class="ow">not</span> <span class="n">expected</span><span class="p">)</span>
<span class="mi">2019</span><span class="o">-</span><span class="mo">03</span><span class="o">-</span><span class="mi">15</span> <span class="mo">02</span><span class="p">:</span><span class="mi">36</span><span class="p">:</span><span class="mi">39</span><span class="p">,</span><span class="mi">610</span> <span class="n">INFO</span> <span class="n">success</span><span class="p">:</span> <span class="n">app</span><span class="o">-</span><span class="n">gunicorn</span> <span class="n">entered</span> <span class="n">RUNNING</span> <span class="n">state</span><span class="p">,</span> <span class="n">process</span> <span class="n">has</span> <span class="n">stayed</span> <span class="n">up</span> <span class="k">for</span> <span class="o">&gt;</span> <span class="n">than</span> <span class="mi">1</span> <span class="n">seconds</span> <span class="p">(</span><span class="n">startsecs</span><span class="p">)</span>
<span class="mi">2019</span><span class="o">-</span><span class="mo">03</span><span class="o">-</span><span class="mi">15</span> <span class="mo">02</span><span class="p">:</span><span class="mi">36</span><span class="p">:</span><span class="mi">39</span><span class="p">,</span><span class="mi">628</span> <span class="n">INFO</span> <span class="n">spawned</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">nginx</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span> <span class="k">with</span> <span class="n">pid</span> <span class="mi">9686</span>
<span class="n">nginx</span><span class="p">:</span> <span class="p">[</span><span class="n">emerg</span><span class="p">]</span> <span class="n">bind</span><span class="p">()</span> <span class="n">to</span> <span class="mf">0.0</span><span class="o">.</span><span class="mf">0.0</span><span class="p">:</span><span class="mi">10087</span> <span class="n">failed</span> <span class="p">(</span><span class="mi">98</span><span class="p">:</span> <span class="n">Address</span> <span class="ow">in</span> <span class="n">use</span><span class="p">)</span>
<span class="n">nginx</span><span class="p">:</span> <span class="p">[</span><span class="n">emerg</span><span class="p">]</span> <span class="n">bind</span><span class="p">()</span> <span class="n">to</span> <span class="mf">0.0</span><span class="o">.</span><span class="mf">0.0</span><span class="p">:</span><span class="mi">10087</span> <span class="n">failed</span> <span class="p">(</span><span class="mi">98</span><span class="p">:</span> <span class="n">Address</span> <span class="ow">in</span> <span class="n">use</span><span class="p">)</span>
<span class="n">nginx</span><span class="p">:</span> <span class="p">[</span><span class="n">emerg</span><span class="p">]</span> <span class="n">bind</span><span class="p">()</span> <span class="n">to</span> <span class="mf">0.0</span><span class="o">.</span><span class="mf">0.0</span><span class="p">:</span><span class="mi">10087</span> <span class="n">failed</span> <span class="p">(</span><span class="mi">98</span><span class="p">:</span> <span class="n">Address</span> <span class="ow">in</span> <span class="n">use</span><span class="p">)</span>
<span class="mi">2019</span><span class="o">-</span><span class="mo">03</span><span class="o">-</span><span class="mi">15</span> <span class="mo">02</span><span class="p">:</span><span class="mi">36</span><span class="p">:</span><span class="mi">40</span><span class="p">,</span><span class="mi">652</span> <span class="n">INFO</span> <span class="n">success</span><span class="p">:</span> <span class="n">nginx</span> <span class="n">entered</span> <span class="n">RUNNING</span> <span class="n">state</span><span class="p">,</span> <span class="n">process</span> <span class="n">has</span> <span class="n">stayed</span> <span class="n">up</span> <span class="k">for</span> <span class="o">&gt;</span> <span class="n">than</span> <span class="mi">1</span> <span class="n">seconds</span> <span class="p">(</span><span class="n">startsecs</span><span class="p">)</span>
<span class="n">nginx</span><span class="p">:</span> <span class="p">[</span><span class="n">emerg</span><span class="p">]</span> <span class="n">bind</span><span class="p">()</span> <span class="n">to</span> <span class="mf">0.0</span><span class="o">.</span><span class="mf">0.0</span><span class="p">:</span><span class="mi">10087</span> <span class="n">failed</span> <span class="p">(</span><span class="mi">98</span><span class="p">:</span> <span class="n">Address</span> <span class="ow">in</span> <span class="n">use</span><span class="p">)</span>
<span class="n">nginx</span><span class="p">:</span> <span class="p">[</span><span class="n">emerg</span><span class="p">]</span> <span class="n">bind</span><span class="p">()</span> <span class="n">to</span> <span class="mf">0.0</span><span class="o">.</span><span class="mf">0.0</span><span class="p">:</span><span class="mi">10087</span> <span class="n">failed</span> <span class="p">(</span><span class="mi">98</span><span class="p">:</span> <span class="n">Address</span> <span class="ow">in</span> <span class="n">use</span><span class="p">)</span></code></pre></div>
手动执行nginx可以正常启动，查询了一番，找到了如下，不能用daemon的方式启动nginx，所以修改nginx配置，添加<code>daemon off;</code> 后恢复正常
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">Supervisord</span> <span class="n">expects</span> <span class="n">nginx</span> <span class="n">to</span> <span class="ow">not</span> <span class="n">fork</span> <span class="n">but</span> <span class="n">remain</span> <span class="ow">in</span> <span class="n">foreground</span><span class="o">.</span> <span class="n">Set</span> <span class="n">daemon</span> <span class="n">to</span> <span class="n">off</span> <span class="ow">in</span> <span class="n">the</span> <span class="n">nginx</span> <span class="n">configuration</span> <span class="nb">file</span></code></pre></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python调用ansible任务并获取返回值]]></title>
    <link href="http://liyongxin.github.io/blog/2019/03/03/pythondiao-yong-ansibleren-wu-bing-huo-qu-fan-hui-zhi/"/>
    <updated>2019-03-03T17:59:19+08:00</updated>
    <id>http://liyongxin.github.io/blog/2019/03/03/pythondiao-yong-ansibleren-wu-bing-huo-qu-fan-hui-zhi</id>
    <content type="html"><![CDATA[<h2>背景</h2>

<p>项目中需要使用python执行ansible的任务，每项任务均需要获取执行结果并做解析，为了方便调用，对ansible的api调用做了封装并对返回结果做了友好处理，特做记录。</p>

<h2>理想中的调用方式</h2>

<p>先不考虑封装逻辑，个人作为使用者，希望的一种使用方式如下(伪代码)：
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">if</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">name</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span> <span class="o">==</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">main</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;&amp;</span><span class="n">rdquo</span><span class="p">;:</span>
    <span class="n">host_list</span> <span class="o">=</span> <span class="p">[</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="mf">192.168</span><span class="o">.</span><span class="mf">8.33</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="mf">192.168</span><span class="o">.</span><span class="mf">8.35</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;]</span>
    <span class="n">api</span> <span class="o">=</span> <span class="n">AnsibleApi</span><span class="p">(</span><span class="n">host_list</span><span class="p">,</span> <span class="n">user</span><span class="o">=</span><span class="n">root</span><span class="p">,</span> <span class="n">password</span><span class="o">=</span><span class="mi">123</span><span class="p">)</span>
    <span class="c"># 传递playbook的path，执行playbook task</span>
    <span class="n">api</span><span class="o">.</span><span class="n">run_playbook</span><span class="p">([</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">playbook_path</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;])</span>
    <span class="c"># 得到执行结果</span>
    <span class="k">return</span> <span class="n">api</span><span class="o">.</span><span class="n">get_playbook_result</span><span class="p">()</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span></code></pre></div>
即我告诉api，我想在host_list所在的机器上执行playbook_path这个playbook指定的任务，然后我得到一个友好的执行结果</p>

<h2>理想中的友好返回</h2>

<p>因为ansible会在多个机器执行多个任务，每个机器上的每个任务的执行情况都需要收集，于是作为开发者，更期望得到如下结构的返回结果：</p>

<!--more-->


<p><div class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">data</span>
    <span class="p">{</span>
            <span class="s">&quot;task_name1&amp;rdquo;: {</span>
                <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">success</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span> <span class="p">{</span>
                    <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mf">192.168</span><span class="o">.</span><span class="mf">8.33</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span> <span class="p">{</span>
                        <span class="p">{</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">changed</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">true</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">end</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mi">2019</span><span class="o">-</span><span class="mo">01</span><span class="o">-</span><span class="mi">17</span> <span class="mo">02</span><span class="p">:</span><span class="mi">31</span><span class="p">:</span><span class="mf">58.519839</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">stdout</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;{}</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">hellip</span><span class="p">;}</span>
                    <span class="p">},</span>
                    <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mf">192.168</span><span class="o">.</span><span class="mf">8.34</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span> <span class="p">{</span>
                    <span class="p">}</span>
                <span class="p">},</span>
                <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">failed</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span> <span class="p">{</span>
                    <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mf">192.168</span><span class="o">.</span><span class="mf">8.35</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span> <span class="p">{</span>
                    <span class="p">}</span>
                <span class="p">},</span>
                <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">unreachable</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span> <span class="p">{</span>
                    <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mf">192.168</span><span class="o">.</span><span class="mf">8.36</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span> <span class="p">{</span>
                    <span class="p">}</span>
                <span class="p">},</span>
                <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">skipped</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span> <span class="p">{</span>
                <span class="p">}</span>
            <span class="p">},</span>
            <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">task_name2</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span> <span class="p">{</span>
                <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">success</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span> <span class="p">{</span>
                    <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mf">192.168</span><span class="o">.</span><span class="mf">8.33</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span> <span class="p">{</span>
                        <span class="p">{</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">changed</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">true</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">end</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mi">2019</span><span class="o">-</span><span class="mo">01</span><span class="o">-</span><span class="mi">17</span> <span class="mo">02</span><span class="p">:</span><span class="mi">31</span><span class="p">:</span><span class="mf">58.519839</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">stdout</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;{}</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">hellip</span><span class="p">;}</span>
                    <span class="p">},</span>
                    <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mf">192.168</span><span class="o">.</span><span class="mf">8.35</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span> <span class="p">{</span>
                    <span class="p">}</span>
                    <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mf">192.168</span><span class="o">.</span><span class="mf">8.34</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span> <span class="p">{</span>
                    <span class="p">}</span>
                <span class="p">},</span>
                <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">failed</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span> <span class="p">{</span>
                <span class="p">},</span>
                <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">unreachable</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span> <span class="p">{</span>
                    <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mf">192.168</span><span class="o">.</span><span class="mf">8.36</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span> <span class="p">{</span>
                    <span class="p">}</span>
                <span class="p">},</span>
                <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">skipped</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span> <span class="p">{</span>
                <span class="p">}</span>
            <span class="p">},</span>
        <span class="p">}</span>
    <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span></code></pre></div>
即以我的playbook中的每个task为核心(key值)，告诉我每个task的执行结果，结果包含了该task在哪些机器上执行成功了，哪些机器上执行失败了，并且无论
成功还是失败，输出结果告知我情况。
那么因为task_name是可以传递到playbook中的，所以开发者很容易就可以获取任何一个task的执行情况，进而做后续的逻辑处理。</p>

<h2>如何针对上述调用方式和返回结果进行封装</h2>

<p>主要说明如何对playbook的调用结果做收集，对于直接调用ansible的模块的结果收集比较简单，代码中有实现，不做额外的说明了。
<a href="https://github.com/liyongxin/case-python/blob/master/ansible/api.py">代码地址</a>，下面只对ansible执行后对callback做说明，其他部分参考代码即可。</p>

<ul>
<li><p>自定义callback类，注册给ansible
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">run_playbook</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">playbook_path</span><span class="p">,</span> <span class="n">ip</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
      <span class="c">#print(&amp;lsquo;self_ips_run_playbook:&amp;rsquo;,self.ips)</span>
      <span class="c"># self.variable_manager.extra_vars = {&amp;lsquo;ansible_ssh_pass&amp;rsquo;: self.default_password, &amp;lsquo;disabled&amp;rsquo;: &amp;lsquo;yes&amp;rsquo;}</span>
      <span class="bp">self</span><span class="o">.</span><span class="n">variable_manager</span><span class="o">.</span><span class="n">extra_vars</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">args</span>
      <span class="n">playbook</span> <span class="o">=</span> <span class="n">PlaybookExecutor</span><span class="p">(</span><span class="n">playbooks</span><span class="o">=</span><span class="n">playbook_path</span><span class="p">,</span>
                                  <span class="n">inventory</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">inventory</span><span class="p">,</span>
                                  <span class="n">variable_manager</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">variable_manager</span><span class="p">,</span>
                                  <span class="n">loader</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">loader</span><span class="p">,</span>
                                  <span class="n">options</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">options</span><span class="p">,</span>
                                  <span class="n">passwords</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">password</span><span class="p">)</span>
      <span class="c"># 注册callback</span>
      <span class="n">playbook</span><span class="o">.&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">tqm</span><span class="o">.&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">stdout_callback</span> <span class="o">=</span> <span class="n">PlaybookResultCallback</span><span class="p">()</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="k">return</span> <span class="n">playbook</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
<span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span></code></pre></div></p></li>
<li><p>实现自定义callback类</p></li>
</ul>


<p><code>ansible</code>的<code>plugins</code>中定义了<code>CallbackBase</code>，只需要实现该基础类即可。
大致的逻辑是按照上述期望的理想的返回结果进行数据拼装，实际使用过程中，发现如果有台机器是unreachable的，那么无论有多少task，如果遇到了unreachable
的情况，那么后续的task就不会在unreachable的机器上执行，因为在实现中做了人工补救<code>__fix_unreachable_result</code>，即对每个task来说，只要有unreachable
的机器，那么都会注册到task的返回结果中。
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">PlaybookResultCallback</span><span class="p">(</span><span class="n">CallbackBase</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
    <span class="nb">super</span><span class="p">(</span><span class="n">PlaybookResultCallback</span><span class="p">,</span><span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">task_unreachable</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">result</span> <span class="o">=</span> <span class="p">{}</span>

<span class="k">def</span> <span class="nf">__init_result_dict</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">result</span><span class="p">):</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">result</span><span class="o">.</span><span class="n">_task</span><span class="o">.</span><span class="n">name</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">result</span><span class="p">:</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">result</span><span class="p">[</span><span class="n">result</span><span class="o">.</span><span class="n">_task</span><span class="o">.</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
            <span class="n">KEYS_SUCCESS</span><span class="p">:</span> <span class="p">{},</span>
            <span class="n">KEYS_FAILED</span><span class="p">:</span> <span class="p">{},</span>
            <span class="n">KEYS_UNREACHABLE</span><span class="p">:</span> <span class="p">{},</span>
            <span class="n">KEYS_SKIPPED</span><span class="p">:</span> <span class="p">{}</span>
        <span class="p">}</span>

<span class="k">def</span> <span class="nf">__set_ansi_result</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">result</span><span class="p">,</span> <span class="nb">type</span><span class="p">):</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">result</span><span class="p">[</span><span class="n">result</span><span class="o">.</span><span class="n">_task</span><span class="o">.</span><span class="n">name</span><span class="p">][</span><span class="nb">type</span><span class="p">][</span><span class="n">result</span><span class="o">.</span><span class="n">_host</span><span class="p">]</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="n">_result</span>

<span class="k">def</span> <span class="nf">__fix_unreachable_result</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">result</span><span class="p">):</span>
    <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">task_unreachable</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">task_unreachable</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">task_unreachable</span><span class="p">:</span>
            <span class="n">unreachable_host</span> <span class="o">=</span> <span class="n">task_unreachable</span><span class="p">[</span><span class="s">&quot;host&quot;</span><span class="p">]</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">unreachable_host</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">result</span><span class="p">[</span><span class="n">result</span><span class="o">.</span><span class="n">_task</span><span class="o">.</span><span class="n">name</span><span class="p">][</span><span class="n">KEYS_UNREACHABLE</span><span class="p">]:</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">result</span><span class="p">[</span><span class="n">result</span><span class="o">.</span><span class="n">_task</span><span class="o">.</span><span class="n">name</span><span class="p">][</span><span class="n">KEYS_UNREACHABLE</span><span class="p">][</span><span class="n">unreachable_host</span><span class="p">]</span> <span class="o">=</span> <span class="n">task_unreachable</span><span class="p">[</span><span class="s">&quot;msg&quot;</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">v2_runner_on_unreachable</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">result</span><span class="p">,</span> <span class="n">ignore_errors</span><span class="o">=</span><span class="bp">True</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="s">&quot;unreachable task {} on host {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">result</span><span class="o">.</span><span class="n">_task</span><span class="p">,</span> <span class="n">result</span><span class="o">.</span><span class="n">_host</span><span class="p">))</span>
    <span class="n">task_unreachable</span> <span class="o">=</span> <span class="p">{</span>
        <span class="s">&quot;host&quot;</span><span class="p">:</span> <span class="n">result</span><span class="o">.</span><span class="n">_host</span><span class="p">,</span>
        <span class="s">&quot;msg&quot;</span><span class="p">:</span> <span class="n">result</span><span class="o">.</span><span class="n">_result</span>
    <span class="p">}</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">task_unreachable</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">task_unreachable</span><span class="p">)</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">__init_result_dict</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">__set_ansi_result</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">KEYS_UNREACHABLE</span><span class="p">)</span>
    <span class="c">#self.result[result._task.name][result._host] = result._result</span>

<span class="k">def</span> <span class="nf">v2_runner_on_ok</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">result</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="s">&quot;playbook task {} ok on host {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">result</span><span class="o">.</span><span class="n">_task</span><span class="p">,</span> <span class="n">result</span><span class="o">.</span><span class="n">_host</span><span class="p">))</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">__init_result_dict</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">__set_ansi_result</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">KEYS_SUCCESS</span><span class="p">)</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">__fix_unreachable_result</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
    <span class="c"># self.result[result._task.name][&quot;success&quot;][result._host] = result._result</span>
    <span class="c">## add unreachable</span>
    <span class="sd">&quot;&quot;&quot;if self.task_unreachable:</span>
<span class="sd">        for task_unreachable in self.task_unreachable:</span>
<span class="sd">            unreachable_host = task_unreachable[&quot;host&quot;]</span>
<span class="sd">            if not unreachable_host in self.result[result._task.name]:</span>
<span class="sd">                self.result[result._task.name][unreachable_host] = task_unreachable[&quot;msg&quot;]&quot;&quot;&quot;</span>

<span class="k">def</span> <span class="nf">v2_runner_on_failed</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">result</span><span class="p">,</span> <span class="n">ignore_errors</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="s">&quot;failed task {} on host {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">result</span><span class="o">.</span><span class="n">_task</span><span class="p">,</span> <span class="n">result</span><span class="o">.</span><span class="n">_host</span><span class="p">))</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">__init_result_dict</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">__set_ansi_result</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">KEYS_FAILED</span><span class="p">)</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">__fix_unreachable_result</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">v2_runner_on_skipped</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">result</span><span class="p">,</span> <span class="n">ignore_errors</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="s">&quot;unreachable task {}  on host {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">result</span><span class="o">.</span><span class="n">_task</span><span class="p">,</span> <span class="n">result</span><span class="o">.</span><span class="n">_host</span><span class="p">))</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">__init_result_dict</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">__set_ansi_result</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">KEYS_SKIPPED</span><span class="p">)</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">__fix_unreachable_result</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
<span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span></code></pre></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[python多线程执行类方法]]></title>
    <link href="http://liyongxin.github.io/blog/2019/03/03/pythonduo-xian-cheng-zhi-xing-lei-fang-fa/"/>
    <updated>2019-03-03T16:56:27+08:00</updated>
    <id>http://liyongxin.github.io/blog/2019/03/03/pythonduo-xian-cheng-zhi-xing-lei-fang-fa</id>
    <content type="html"><![CDATA[<h2>case概述</h2>

<p>python可以使用多线程处理多个任务，最基本的处理思路如下：</p>

<ul>
<li>定义一个基类，然后基于该类实现多个子类完成业务功能；</li>
<li>为每个子类的调用分配一个子线程，并调用子线程的业务入口；</li>
<li>运行子线程，主线程实现任务结果处理；</li>
</ul>


<p>基于以上思路，做了基本的case，代码参考<a href="https://github.com/liyongxin/case-python/tree/master/thread_test">github地址</a>，项目结构如下：
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">.</span>
<span class="err">└──</span> <span class="n">thread_test</span>
    <span class="err">├──</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">init</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;.</span><span class="n">py</span>
    <span class="err">├──</span> <span class="n">collector</span>
    <span class="err">│  </span> <span class="err">├──</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">init</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;.</span><span class="n">py</span>
    <span class="err">│  </span> <span class="err">├──</span> <span class="n">c1</span><span class="o">.</span><span class="n">py</span>
    <span class="err">│  </span> <span class="err">├──</span> <span class="n">c2</span><span class="o">.</span><span class="n">py</span>
    <span class="err">│  </span> <span class="err">└──</span> <span class="n">collector</span><span class="o">.</span><span class="n">py</span>
    <span class="err">├──</span> <span class="n">threads</span><span class="o">.</span><span class="n">py</span>
    <span class="err">└──</span> <span class="n">threads_queue</span><span class="o">.</span><span class="n">py</span></code></pre></div></p>

<h2>代码简介</h2>

<h4>定义一个基类，然后基于该类实现多个子类完成业务功能</h4>

<p><code>collector</code>包下定义了<code>collector</code>这个基类，然后<code>c1.py与c2.py</code>分别是实现了该基类的子类，同时使用<code>get_data</code>模拟业务逻辑的入口，
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">from</span> <span class="o">.</span><span class="n">collector</span> <span class="n">import</span> <span class="no">Collector</span><span class="o">&lt;</span><span class="sr">/p&gt;</span>

<span class="sr">&lt;p&gt;class C1(Collector):</span>
<span class="sr">    @classmethod</span>
<span class="sr">    def get_data(cls, msg):</span>
<span class="sr">        print(&amp;ldquo;i am from &amp;rdquo;, msg)</span>
<span class="sr">        return msg</span></code></pre></div></p>

<!--more-->


<h4>为每个子类的调用分配一个子线程，并调用子线程的业务入口</h4>

<ul>
<li>获取所有的业务子类</li>
</ul>


<p>为了给每个子类分配一个子线程，需要先获取所有的子类，使用递归的方式，根据基类名称来读取所有基类的实现类
<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">def</span> <span class="nf">get_all_subclasses</span><span class="p">(</span><span class="n">mod</span><span class="p">):</span>
    <span class="n">all_subclasses</span> <span class="o">=</span> <span class="p">{}</span>
    <span class="c1">## collections</span>
    <span class="k">for</span> <span class="n">subclass</span> <span class="k">in</span> <span class="o">.</span><span class="n">&lt;strong</span><span class="o">&gt;</span><span class="n">subclasses</span><span class="o">&lt;</span><span class="sr">/strong&gt;():</span>
<span class="sr">        class_name = subclass.&lt;strong&gt;name&lt;/s</span><span class="n">trong</span><span class="o">&gt;.</span><span class="n">lower</span><span class="p">()</span>
        <span class="k">if</span> <span class="ow">not</span> <span class="n">class_name</span> <span class="k">in</span> <span class="n">all_subclasses</span><span class="o">.</span><span class="n">keys</span><span class="p">():</span>
            <span class="n">all_subclasses</span><span class="o">[</span><span class="n">class_name</span><span class="o">]</span> <span class="o">=</span> <span class="n">subclass</span>
        <span class="n">get_all_subclasses</span><span class="p">(</span><span class="n">subclass</span><span class="p">)</span>
    <span class="k">return</span> <span class="n">all_subclasses</span></code></pre></div></p>

<ul>
<li>实现多线程类，并在默认的线程入口run方法中调用注册方法
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="kn">import</span> <span class="nn">threading</span>
<span class="kn">from</span> <span class="nn">thread_test.collector.collector</span> <span class="kn">import</span> <span class="n">Collector</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
<span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>


<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="k">class</span> <span class="nc">GrabThread</span><span class="p">(</span><span class="n">threading</span><span class="o">.</span><span class="n">Thread</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span><span class="n">func</span><span class="p">,</span><span class="n">args</span><span class="o">=</span><span class="p">()):</span>
    <span class="nb">super</span><span class="p">(</span><span class="n">GrabThread</span><span class="p">,</span><span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">__init__</span><span class="p">()</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">func</span> <span class="o">=</span> <span class="n">func</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">args</span> <span class="o">=</span> <span class="n">args</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">result</span> <span class="o">=</span> <span class="bp">None</span>

<span class="k">def</span> <span class="nf">run</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
<span class="sd">&quot;&quot;&quot;run func registry by sub-class&quot;&quot;&quot;</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">result</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">func</span><span class="p">(</span><span class="o">*</span><span class="bp">self</span><span class="o">.</span><span class="n">args</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">get_result</span><span class="p">(</span><span class="bp">self</span><span class="p">):</span>
    <span class="k">try</span><span class="p">:</span>
        <span class="k">return</span> <span class="bp">self</span><span class="o">.</span><span class="n">result</span>
    <span class="k">except</span> <span class="ne">Exception</span> <span class="k">as</span> <span class="n">e</span><span class="p">:</span>
        <span class="k">return</span> <span class="nb">str</span><span class="p">(</span><span class="n">e</span><span class="p">)</span>
<span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span></code></pre></div></p>

<ul>
<li><p>主线程注册子类到子线程中，并进行调用
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
  <span class="n">all_cls</span> <span class="o">=</span> <span class="n">get_all_subclasses</span><span class="p">(</span><span class="n">Collector</span><span class="p">)</span>
  <span class="n">threads</span> <span class="o">=</span> <span class="p">[]</span>
  <span class="k">for</span> <span class="n">item</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">all_cls</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
      <span class="n">fn_collect</span> <span class="o">=</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">get_data</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="bp">None</span><span class="p">)</span>
      <span class="k">if</span> <span class="nb">callable</span><span class="p">(</span><span class="n">fn_collect</span><span class="p">):</span>
          <span class="n">p</span> <span class="o">=</span> <span class="n">GrabThread</span><span class="p">(</span><span class="n">func</span><span class="o">=</span><span class="n">fn_collect</span><span class="p">,</span> <span class="n">args</span><span class="o">=</span><span class="p">(</span><span class="n">item</span><span class="p">,))</span>
          <span class="n">threads</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
          <span class="n">p</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
          <span class="k">print</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="err">执行</span><span class="p">{</span><span class="mi">0</span><span class="p">}</span><span class="err">的</span><span class="n">collect</span> <span class="err">方法</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">item</span><span class="p">))</span>
  <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">threads</span><span class="p">:</span>
      <span class="n">p</span><span class="o">.</span><span class="n">join</span><span class="p">()</span>  <span class="c">#&lt;/p&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span>  <span class="k">print</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">main</span> <span class="n">done</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span></code></pre></div></p></li>
</ul>


<h2>执行结果</h2>

<p>每个线程负责一个子任务，并行运行
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;/</span><span class="n">usr</span><span class="o">/</span><span class="n">local</span><span class="o">/</span><span class="n">Cellar</span><span class="o">/</span><span class="n">python</span><span class="o">/</span><span class="mf">3.7</span><span class="o">.</span><span class="mi">1</span><span class="o">/</span><span class="n">Frameworks</span><span class="o">/</span><span class="n">Python</span><span class="o">.</span><span class="n">framework</span><span class="o">/</span><span class="n">Versions</span><span class="o">/</span><span class="mf">3.7</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">python3</span><span class="o">.</span><span class="mi">7</span> <span class="o">/</span><span class="n">Users</span><span class="o">/</span><span class="n">liyongxin</span><span class="o">/</span><span class="n">PycharmProjects</span><span class="o">/</span><span class="n">case</span><span class="o">-</span><span class="n">python</span><span class="o">/</span><span class="n">thread_test</span><span class="o">/</span><span class="n">threads</span><span class="o">.</span><span class="n">py</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">i</span> <span class="n">am</span> <span class="kn">from</span>  <span class="nn">c1</span>
<span class="err">执行</span><span class="n">c1</span><span class="err">的</span><span class="n">collect</span> <span class="err">方法</span>
<span class="n">i</span> <span class="n">am</span> <span class="kn">from</span>  <span class="nn">c2</span>
<span class="err">执行</span><span class="n">c2</span><span class="err">的</span><span class="n">collect</span> <span class="err">方法</span>
<span class="n">main</span> <span class="n">done</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">Process</span> <span class="n">finished</span> <span class="k">with</span> <span class="nb">exit</span> <span class="n">code</span> <span class="mi">0</span></code></pre></div></p>
]]></content>
  </entry>
  
</feed>
