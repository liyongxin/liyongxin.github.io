<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: javascript | Earlene]]></title>
  <link href="http://liyongxin.github.io/blog/categories/javascript/atom.xml" rel="self"/>
  <link href="http://liyongxin.github.io/"/>
  <updated>2019-03-01T10:27:51+08:00</updated>
  <id>http://liyongxin.github.io/</id>
  <author>
    <name><![CDATA[yxli@alauda.io]]></name>
    <email><![CDATA[yxli@alauda.io]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[javascript运行顺序详解]]></title>
    <link href="http://liyongxin.github.io/blog/2018/05/17/javascriptyun-xing-shun-xu-xiang-jie/"/>
    <updated>2018-05-17T20:30:37+08:00</updated>
    <id>http://liyongxin.github.io/blog/2018/05/17/javascriptyun-xing-shun-xu-xiang-jie</id>
    <content type="html"><![CDATA[<p>JavaScript是一种描述型脚本语言，它不同于java或C#等编译性语言,它不需要进行编译成中间语言,而是由浏览器进行动态地解析与执行。如果你不能理解javaScript语言的运行机制，或者简单地说，你不能掌握javascript的执行顺序，那你就犹如伯乐驾驭不了千里马，让千里马脱缰而出，四处乱窜。
那么JavaScript是怎么来进行解析的吗？它的执行顺序又是如何的呢？在了解这些之前，我们先来认识几个重要的术语：</p>

<h3>代码块</h3>

<p><code>JavaScript</code>中的代码块是指由<code>&lt;script&gt;</code>标签分割的代码段。例如：
<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="c1">// 示例代码&lt;/p&gt;</span>

<span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;</span>
      <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;这是代码块一&quot;</span><span class="p">);</span>
<span class="o">&lt;</span><span class="err">/script&gt;</span>




<span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;</span>
      <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;这是代码块二&quot;</span><span class="p">);</span>
<span class="o">&lt;</span><span class="err">/script&gt;</span>


<span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span></code></pre></div>
JS是按照代码块来进行编译和执行的，代码块间相互独立，但变量和方法共享。什么意思呢? 举个例子，你就明白了：
<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="o">&lt;</span><span class="err">/p&gt;</span>

<span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;</span>
    <span class="nx">alert</span><span class="p">(</span><span class="nx">str</span><span class="p">);</span>   <span class="c1">//因为没有定义str，所以浏览器会出错，下面的不能运行</span>
    <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;我是代码块一&quot;</span><span class="p">);</span>  <span class="c1">//没有运行到这里</span>
    <span class="kd">var</span> <span class="nx">test</span> <span class="o">=</span> <span class="s2">&quot;我是代码块一变量&quot;</span><span class="p">;</span>
<span class="o">&lt;</span><span class="err">/script&gt;</span>




<span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;</span>
    <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;我是代码块二&quot;</span><span class="p">);</span>  <span class="c1">//这里有运行到</span>
    <span class="nx">alert</span><span class="p">(</span><span class="nx">test</span><span class="p">);</span>  <span class="c1">//弹出&quot;我是代码块一变量&quot;</span>
<span class="o">&lt;</span><span class="err">/script&gt;</span>


<span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span></code></pre></div>
上面的代码中代码块一中运行报错，但不影响代码块二的执行，这就是代码块间的独立性，而代码块二中能调用到代码一中的变量，则是块间共享性。</p>

<!--more-->


<h3>声明式函数与赋值式函数</h3>

<p>JS中的函数定义分为两种：声明式函数与赋值式函数。
<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="o">&lt;</span><span class="err">/p&gt;</span>

<span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;</span>
    <span class="kd">function</span> <span class="nx">Fn</span><span class="p">(){</span>
      <span class="c1">//声明式函数</span>
    <span class="p">}</span>
    <span class="kd">var</span> <span class="nx">Fn</span> <span class="o">=</span> <span class="kd">function</span><span class="p">{</span>
      <span class="c1">//赋值式函数</span>
    <span class="p">}</span>
<span class="o">&lt;</span><span class="err">/script&gt;</span>


<span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span></code></pre></div>
声明式函数与赋值式函数的区别在于：在JS的预编译期，声明式函数将会先被提取出来，然后才按顺序执行js代码。</p>

<h3>预编译期与执行期</h3>

<p>事实上，JS的解析过程分为两个阶段：预编译期(预处理)与执行期。
预编译期JS会对本代码块中的所有声明的变量和函数进行处理（类似与C语言的编译），但需要注意的是此时处理函数的只是声明式函数，而且变量也只是进行了声明但未进行初始化以及赋值。
<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="o">&lt;</span><span class="err">/p&gt;</span>

<span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;</span>
    <span class="nx">Fn</span><span class="p">();</span>  <span class="c1">//执行结果：&quot;执行了函数2&quot;,同名函数后者会覆盖前者</span>
      <span class="kd">function</span> <span class="nx">Fn</span><span class="p">(){</span> <span class="c1">//函数1</span>
      <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;执行了函数1&quot;</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="kd">function</span> <span class="nx">Fn</span><span class="p">(){</span>  <span class="c1">//函数2</span>
      <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;执行了函数2&quot;</span><span class="p">);</span>
    <span class="p">}</span>
<span class="o">&lt;</span><span class="err">/script&gt;</span>




<span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;</span>
      <span class="nx">Fn</span><span class="p">();</span>  <span class="c1">//执行了声明式函数,在预编译期声明函数及被处理了，所以即使Fn()调用函数放在声明函数前也能执行。</span>
      <span class="kd">function</span> <span class="nx">Fn</span><span class="p">(){</span>
         <span class="c1">//声明式函数</span>
         <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;执行了声明式函数&quot;</span><span class="p">);</span>
      <span class="p">}</span>

      <span class="kd">var</span> <span class="nx">Fn</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
         <span class="c1">//赋值式函数</span>
         <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;执行了赋值式函数&quot;</span><span class="p">);</span>
      <span class="p">}</span>
<span class="o">&lt;</span><span class="err">/script&gt;</span>


<span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span></code></pre></div></p>

<p>js在预处理期对变量进行了声明处理,但是并没有进行初始化与赋值，所以导致代码块二中的变量是unfiened的
<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="c1">//代码块一&lt;/p&gt;</span>

<span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;</span>
      <span class="nx">alert</span><span class="p">(</span><span class="nx">str</span><span class="p">);</span><span class="c1">//浏览器报错,但并没有弹出信息窗</span>
<span class="o">&lt;</span><span class="err">/script&gt;</span>


<span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span><span class="c1">//代码块二&lt;/p&gt;</span>

<span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;</span>
      <span class="nx">alert</span><span class="p">(</span><span class="nx">str</span><span class="p">);</span> <span class="c1">//弹窗&quot;undefined&quot;</span>
      <span class="kd">var</span> <span class="nx">str</span> <span class="o">=</span> <span class="s2">&quot;aaa&quot;</span><span class="p">;</span>
<span class="o">&lt;</span><span class="err">/script&gt;</span>


<span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span></code></pre></div></p>

<h3>执行顺序总结</h3>

<p>理解了上面的几个术语，相信大家对JS的运行机制已经有了个大概的印象了，现在我们来看个例子：
<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="o">&lt;</span><span class="err">/p&gt;</span>

<span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;</span>
      <span class="nx">Fn</span><span class="p">();</span>  <span class="c1">//浏览器报错:&quot;undefined&quot;</span>
<span class="o">&lt;</span><span class="err">/script&gt;</span>




<span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;</span>
      <span class="kd">function</span> <span class="nx">Fn</span><span class="p">(){</span>
          <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;执行了函数1&quot;</span><span class="p">);</span>
      <span class="p">}</span>
<span class="o">&lt;</span><span class="err">/script&gt;</span>


<span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span></code></pre></div></p>

<p>为什么运行上面的代码浏览器会报错呢？声明函数不是会在预处理期就会被处理了吗，怎么还会找不到Fn()函数呢？其实这是一个理解误点，
我们上面说了JS引擎是按照代码块来顺序执行的，其实完整的说应该是按照代码块来进行预处理和执行的，也就是说预处理的只是执行到的代码块的声明函数和变量，而对于还未加载的代码块，是没法进行预处理的，这也是边编译边处理的核心所在。
现在，让我们来总结整理下：</p>

<ul>
<li><strong>Step 1</strong> ：读入第一个代码块；</li>
<li><strong>Step 2</strong> ：做语法分析，有错则报语法错误（比如括号不匹配等），并跳转到step5；</li>
<li><strong>Step 3</strong> ：对var变量和function定义做“预编译处理”（永远不会报错的，因为只解析正确的声明）；</li>
<li><strong>Step 4</strong> ：执行代码段，有错则报错（比如变量未定义）；</li>
<li><strong>Step 5</strong> ：如果还有下一个代码段，则读入下一个代码段，重复step2；</li>
<li><strong>Step 6</strong> ：结束；</li>
</ul>


<p>而根据HTML文档流的执行顺序，需要在页面元素渲染前执行的js代码应该放在<code>&lt;body&gt;</code>前面的<code>&lt;script&gt;</code>代码块中，而需要在页面元素加载完后的js放在</body>元素后面，body标签的onload事件是在最后执行的。
<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="o">&lt;</span><span class="err">/p&gt;</span>

<span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;</span>
    <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;first&quot;</span><span class="p">);</span>
    <span class="kd">function</span> <span class="nx">Fn</span><span class="p">(){</span>
        <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;third&quot;</span><span class="p">);</span>
    <span class="p">}</span>
<span class="o">&lt;</span><span class="err">/script&gt;</span>


<span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;&lt;</span><span class="nx">body</span> <span class="nx">onload</span><span class="o">=</span><span class="s2">&quot;Fn()&quot;</span><span class="o">&gt;</span>
    <span class="c1">//html content</span>
<span class="o">&lt;</span><span class="err">/body&gt;&lt;/p&gt;</span>

<span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;</span>
    <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;second&quot;</span><span class="p">);</span>
<span class="o">&lt;</span><span class="err">/script&gt;</span>


<span class="o">&lt;</span><span class="nx">p</span><span class="o">&gt;</span></code></pre></div></p>
]]></content>
  </entry>
  
</feed>
