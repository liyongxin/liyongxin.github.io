<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: ansible | Earlene]]></title>
  <link href="http://liyongxin.github.io/blog/categories/ansible/atom.xml" rel="self"/>
  <link href="http://liyongxin.github.io/"/>
  <updated>2019-06-27T19:20:27+08:00</updated>
  <id>http://liyongxin.github.io/</id>
  <author>
    <name><![CDATA[yxli@alauda.io]]></name>
    <email><![CDATA[yxli@alauda.io]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[python调用ansible任务并获取返回值]]></title>
    <link href="http://liyongxin.github.io/blog/2019/03/03/pythondiao-yong-ansibleren-wu-bing-huo-qu-fan-hui-zhi/"/>
    <updated>2019-03-03T17:59:19+08:00</updated>
    <id>http://liyongxin.github.io/blog/2019/03/03/pythondiao-yong-ansibleren-wu-bing-huo-qu-fan-hui-zhi</id>
    <content type="html"><![CDATA[<h2>背景</h2>

<p>项目中需要使用python执行ansible的任务，每项任务均需要获取执行结果并做解析，为了方便调用，对ansible的api调用做了封装并对返回结果做了友好处理，特做记录。</p>

<h2>理想中的调用方式</h2>

<p>先不考虑封装逻辑，个人作为使用者，希望的一种使用方式如下(伪代码)：
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">if</span> <span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">name</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;</span> <span class="o">==</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&lt;</span><span class="n">strong</span><span class="o">&gt;</span><span class="n">main</span><span class="o">&lt;/</span><span class="n">strong</span><span class="o">&gt;&amp;</span><span class="n">rdquo</span><span class="p">;:</span>
    <span class="n">host_list</span> <span class="o">=</span> <span class="p">[</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="mf">192.168</span><span class="o">.</span><span class="mf">8.33</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="mf">192.168</span><span class="o">.</span><span class="mf">8.35</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;]</span>
    <span class="n">api</span> <span class="o">=</span> <span class="n">AnsibleApi</span><span class="p">(</span><span class="n">host_list</span><span class="p">,</span> <span class="n">user</span><span class="o">=</span><span class="n">root</span><span class="p">,</span> <span class="n">password</span><span class="o">=</span><span class="mi">123</span><span class="p">)</span>
    <span class="c"># 传递playbook的path，执行playbook task</span>
    <span class="n">api</span><span class="o">.</span><span class="n">run_playbook</span><span class="p">([</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">playbook_path</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;])</span>
    <span class="c"># 得到执行结果</span>
    <span class="k">return</span> <span class="n">api</span><span class="o">.</span><span class="n">get_playbook_result</span><span class="p">()</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span></code></pre></div>
即我告诉api，我想在host_list所在的机器上执行playbook_path这个playbook指定的任务，然后我得到一个友好的执行结果</p>

<h2>理想中的友好返回</h2>

<p>因为ansible会在多个机器执行多个任务，每个机器上的每个任务的执行情况都需要收集，于是作为开发者，更期望得到如下结构的返回结果：</p>

<!--more-->


<p><div class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span>
    <span class="k">return</span> <span class="n">data</span>
    <span class="p">{</span>
            <span class="s">&quot;task_name1&amp;rdquo;: {</span>
                <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">success</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span> <span class="p">{</span>
                    <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mf">192.168</span><span class="o">.</span><span class="mf">8.33</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span> <span class="p">{</span>
                        <span class="p">{</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">changed</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">true</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">end</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mi">2019</span><span class="o">-</span><span class="mo">01</span><span class="o">-</span><span class="mi">17</span> <span class="mo">02</span><span class="p">:</span><span class="mi">31</span><span class="p">:</span><span class="mf">58.519839</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">stdout</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;{}</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">hellip</span><span class="p">;}</span>
                    <span class="p">},</span>
                    <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mf">192.168</span><span class="o">.</span><span class="mf">8.34</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span> <span class="p">{</span>
                    <span class="p">}</span>
                <span class="p">},</span>
                <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">failed</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span> <span class="p">{</span>
                    <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mf">192.168</span><span class="o">.</span><span class="mf">8.35</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span> <span class="p">{</span>
                    <span class="p">}</span>
                <span class="p">},</span>
                <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">unreachable</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span> <span class="p">{</span>
                    <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mf">192.168</span><span class="o">.</span><span class="mf">8.36</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span> <span class="p">{</span>
                    <span class="p">}</span>
                <span class="p">},</span>
                <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">skipped</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span> <span class="p">{</span>
                <span class="p">}</span>
            <span class="p">},</span>
            <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">task_name2</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span> <span class="p">{</span>
                <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">success</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span> <span class="p">{</span>
                    <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mf">192.168</span><span class="o">.</span><span class="mf">8.33</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span> <span class="p">{</span>
                        <span class="p">{</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">changed</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">true</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">end</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mi">2019</span><span class="o">-</span><span class="mo">01</span><span class="o">-</span><span class="mi">17</span> <span class="mo">02</span><span class="p">:</span><span class="mi">31</span><span class="p">:</span><span class="mf">58.519839</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">stdout</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;{}</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span> <span class="o">&amp;</span><span class="n">hellip</span><span class="p">;}</span>
                    <span class="p">},</span>
                    <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mf">192.168</span><span class="o">.</span><span class="mf">8.35</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span> <span class="p">{</span>
                    <span class="p">}</span>
                    <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mf">192.168</span><span class="o">.</span><span class="mf">8.34</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span> <span class="p">{</span>
                    <span class="p">}</span>
                <span class="p">},</span>
                <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">failed</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span> <span class="p">{</span>
                <span class="p">},</span>
                <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">unreachable</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span> <span class="p">{</span>
                    <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="mf">192.168</span><span class="o">.</span><span class="mf">8.36</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span> <span class="p">{</span>
                    <span class="p">}</span>
                <span class="p">},</span>
                <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">skipped</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;:</span> <span class="p">{</span>
                <span class="p">}</span>
            <span class="p">},</span>
        <span class="p">}</span>
    <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span></code></pre></div>
即以我的playbook中的每个task为核心(key值)，告诉我每个task的执行结果，结果包含了该task在哪些机器上执行成功了，哪些机器上执行失败了，并且无论
成功还是失败，输出结果告知我情况。
那么因为task_name是可以传递到playbook中的，所以开发者很容易就可以获取任何一个task的执行情况，进而做后续的逻辑处理。</p>

<h2>如何针对上述调用方式和返回结果进行封装</h2>

<p>主要说明如何对playbook的调用结果做收集，对于直接调用ansible的模块的结果收集比较简单，代码中有实现，不做额外的说明了。
<a href="https://github.com/liyongxin/case-python/blob/master/ansible/api.py">代码地址</a>，下面只对ansible执行后对callback做说明，其他部分参考代码即可。</p>

<ul>
<li><p>自定义callback类，注册给ansible
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">run_playbook</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">playbook_path</span><span class="p">,</span> <span class="n">ip</span><span class="o">=</span><span class="bp">None</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
      <span class="c">#print(&amp;lsquo;self_ips_run_playbook:&amp;rsquo;,self.ips)</span>
      <span class="c"># self.variable_manager.extra_vars = {&amp;lsquo;ansible_ssh_pass&amp;rsquo;: self.default_password, &amp;lsquo;disabled&amp;rsquo;: &amp;lsquo;yes&amp;rsquo;}</span>
      <span class="bp">self</span><span class="o">.</span><span class="n">variable_manager</span><span class="o">.</span><span class="n">extra_vars</span> <span class="o">=</span> <span class="bp">self</span><span class="o">.</span><span class="n">args</span>
      <span class="n">playbook</span> <span class="o">=</span> <span class="n">PlaybookExecutor</span><span class="p">(</span><span class="n">playbooks</span><span class="o">=</span><span class="n">playbook_path</span><span class="p">,</span>
                                  <span class="n">inventory</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">inventory</span><span class="p">,</span>
                                  <span class="n">variable_manager</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">variable_manager</span><span class="p">,</span>
                                  <span class="n">loader</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">loader</span><span class="p">,</span>
                                  <span class="n">options</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">options</span><span class="p">,</span>
                                  <span class="n">passwords</span><span class="o">=</span><span class="bp">self</span><span class="o">.</span><span class="n">password</span><span class="p">)</span>
      <span class="c"># 注册callback</span>
      <span class="n">playbook</span><span class="o">.&lt;</span><span class="n">em</span><span class="o">&gt;</span><span class="n">tqm</span><span class="o">.&lt;/</span><span class="n">em</span><span class="o">&gt;</span><span class="n">stdout_callback</span> <span class="o">=</span> <span class="n">PlaybookResultCallback</span><span class="p">()</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span>  <span class="k">return</span> <span class="n">playbook</span><span class="o">.</span><span class="n">run</span><span class="p">()</span>
<span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span></code></pre></div></p></li>
<li><p>实现自定义callback类</p></li>
</ul>


<p><code>ansible</code>的<code>plugins</code>中定义了<code>CallbackBase</code>，只需要实现该基础类即可。
大致的逻辑是按照上述期望的理想的返回结果进行数据拼装，实际使用过程中，发现如果有台机器是unreachable的，那么无论有多少task，如果遇到了unreachable
的情况，那么后续的task就不会在unreachable的机器上执行，因为在实现中做了人工补救<code>__fix_unreachable_result</code>，即对每个task来说，只要有unreachable
的机器，那么都会注册到task的返回结果中。
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">class</span> <span class="nc">PlaybookResultCallback</span><span class="p">(</span><span class="n">CallbackBase</span><span class="p">):</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">pre</span><span class="o">&gt;&lt;</span><span class="n">code</span><span class="o">&gt;</span><span class="k">def</span> <span class="nf">__init__</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
    <span class="nb">super</span><span class="p">(</span><span class="n">PlaybookResultCallback</span><span class="p">,</span><span class="bp">self</span><span class="p">)</span><span class="o">.</span><span class="n">__init__</span><span class="p">(</span><span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">)</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">task_unreachable</span> <span class="o">=</span> <span class="p">[]</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">result</span> <span class="o">=</span> <span class="p">{}</span>

<span class="k">def</span> <span class="nf">__init_result_dict</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">result</span><span class="p">):</span>
    <span class="k">if</span> <span class="ow">not</span> <span class="n">result</span><span class="o">.</span><span class="n">_task</span><span class="o">.</span><span class="n">name</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">result</span><span class="p">:</span>
        <span class="bp">self</span><span class="o">.</span><span class="n">result</span><span class="p">[</span><span class="n">result</span><span class="o">.</span><span class="n">_task</span><span class="o">.</span><span class="n">name</span><span class="p">]</span> <span class="o">=</span> <span class="p">{</span>
            <span class="n">KEYS_SUCCESS</span><span class="p">:</span> <span class="p">{},</span>
            <span class="n">KEYS_FAILED</span><span class="p">:</span> <span class="p">{},</span>
            <span class="n">KEYS_UNREACHABLE</span><span class="p">:</span> <span class="p">{},</span>
            <span class="n">KEYS_SKIPPED</span><span class="p">:</span> <span class="p">{}</span>
        <span class="p">}</span>

<span class="k">def</span> <span class="nf">__set_ansi_result</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">result</span><span class="p">,</span> <span class="nb">type</span><span class="p">):</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">result</span><span class="p">[</span><span class="n">result</span><span class="o">.</span><span class="n">_task</span><span class="o">.</span><span class="n">name</span><span class="p">][</span><span class="nb">type</span><span class="p">][</span><span class="n">result</span><span class="o">.</span><span class="n">_host</span><span class="p">]</span> <span class="o">=</span> <span class="n">result</span><span class="o">.</span><span class="n">_result</span>

<span class="k">def</span> <span class="nf">__fix_unreachable_result</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">result</span><span class="p">):</span>
    <span class="k">if</span> <span class="bp">self</span><span class="o">.</span><span class="n">task_unreachable</span><span class="p">:</span>
        <span class="k">for</span> <span class="n">task_unreachable</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">task_unreachable</span><span class="p">:</span>
            <span class="n">unreachable_host</span> <span class="o">=</span> <span class="n">task_unreachable</span><span class="p">[</span><span class="s">&quot;host&quot;</span><span class="p">]</span>
            <span class="k">if</span> <span class="ow">not</span> <span class="n">unreachable_host</span> <span class="ow">in</span> <span class="bp">self</span><span class="o">.</span><span class="n">result</span><span class="p">[</span><span class="n">result</span><span class="o">.</span><span class="n">_task</span><span class="o">.</span><span class="n">name</span><span class="p">][</span><span class="n">KEYS_UNREACHABLE</span><span class="p">]:</span>
                <span class="bp">self</span><span class="o">.</span><span class="n">result</span><span class="p">[</span><span class="n">result</span><span class="o">.</span><span class="n">_task</span><span class="o">.</span><span class="n">name</span><span class="p">][</span><span class="n">KEYS_UNREACHABLE</span><span class="p">][</span><span class="n">unreachable_host</span><span class="p">]</span> <span class="o">=</span> <span class="n">task_unreachable</span><span class="p">[</span><span class="s">&quot;msg&quot;</span><span class="p">]</span>

<span class="k">def</span> <span class="nf">v2_runner_on_unreachable</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">result</span><span class="p">,</span> <span class="n">ignore_errors</span><span class="o">=</span><span class="bp">True</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="s">&quot;unreachable task {} on host {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">result</span><span class="o">.</span><span class="n">_task</span><span class="p">,</span> <span class="n">result</span><span class="o">.</span><span class="n">_host</span><span class="p">))</span>
    <span class="n">task_unreachable</span> <span class="o">=</span> <span class="p">{</span>
        <span class="s">&quot;host&quot;</span><span class="p">:</span> <span class="n">result</span><span class="o">.</span><span class="n">_host</span><span class="p">,</span>
        <span class="s">&quot;msg&quot;</span><span class="p">:</span> <span class="n">result</span><span class="o">.</span><span class="n">_result</span>
    <span class="p">}</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">task_unreachable</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">task_unreachable</span><span class="p">)</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">__init_result_dict</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">__set_ansi_result</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">KEYS_UNREACHABLE</span><span class="p">)</span>
    <span class="c">#self.result[result._task.name][result._host] = result._result</span>

<span class="k">def</span> <span class="nf">v2_runner_on_ok</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">result</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="s">&quot;playbook task {} ok on host {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">result</span><span class="o">.</span><span class="n">_task</span><span class="p">,</span> <span class="n">result</span><span class="o">.</span><span class="n">_host</span><span class="p">))</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">__init_result_dict</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">__set_ansi_result</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">KEYS_SUCCESS</span><span class="p">)</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">__fix_unreachable_result</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
    <span class="c"># self.result[result._task.name][&quot;success&quot;][result._host] = result._result</span>
    <span class="c">## add unreachable</span>
    <span class="sd">&quot;&quot;&quot;if self.task_unreachable:</span>
<span class="sd">        for task_unreachable in self.task_unreachable:</span>
<span class="sd">            unreachable_host = task_unreachable[&quot;host&quot;]</span>
<span class="sd">            if not unreachable_host in self.result[result._task.name]:</span>
<span class="sd">                self.result[result._task.name][unreachable_host] = task_unreachable[&quot;msg&quot;]&quot;&quot;&quot;</span>

<span class="k">def</span> <span class="nf">v2_runner_on_failed</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">result</span><span class="p">,</span> <span class="n">ignore_errors</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="s">&quot;failed task {} on host {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">result</span><span class="o">.</span><span class="n">_task</span><span class="p">,</span> <span class="n">result</span><span class="o">.</span><span class="n">_host</span><span class="p">))</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">__init_result_dict</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">__set_ansi_result</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">KEYS_FAILED</span><span class="p">)</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">__fix_unreachable_result</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>

<span class="k">def</span> <span class="nf">v2_runner_on_skipped</span><span class="p">(</span><span class="bp">self</span><span class="p">,</span> <span class="n">result</span><span class="p">,</span> <span class="n">ignore_errors</span><span class="o">=</span><span class="bp">True</span><span class="p">,</span> <span class="o">*</span><span class="n">args</span><span class="p">,</span> <span class="o">**</span><span class="n">kwargs</span><span class="p">):</span>
    <span class="k">print</span><span class="p">(</span><span class="s">&quot;unreachable task {}  on host {}&quot;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">result</span><span class="o">.</span><span class="n">_task</span><span class="p">,</span> <span class="n">result</span><span class="o">.</span><span class="n">_host</span><span class="p">))</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">__init_result_dict</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">__set_ansi_result</span><span class="p">(</span><span class="n">result</span><span class="p">,</span> <span class="n">KEYS_SKIPPED</span><span class="p">)</span>
    <span class="bp">self</span><span class="o">.</span><span class="n">__fix_unreachable_result</span><span class="p">(</span><span class="n">result</span><span class="p">)</span>
<span class="o">&lt;/</span><span class="n">code</span><span class="o">&gt;&lt;/</span><span class="n">pre</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span></code></pre></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[somethings about ansible]]></title>
    <link href="http://liyongxin.github.io/blog/2019/02/28/ansible-sui-shou-ji/"/>
    <updated>2019-02-28T14:18:47+08:00</updated>
    <id>http://liyongxin.github.io/blog/2019/02/28/ansible-sui-shou-ji</id>
    <content type="html"><![CDATA[<ul>
<li><h4>task解析json并注册变量给其他task使用</h4>

多个task涉及变量传递时，有时taskA取值是json格式，taskB若想使用json中的数据，可以通过如下方式：
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">get</span> <span class="n">config</span> <span class="n">task</span> <span class="n">stdout</span> <span class="ow">is</span> <span class="n">json</span> <span class="n">format</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;</span><span class="n">name</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">get_config</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
<span class="n">shell</span><span class="p">:</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">local</span><span class="o">/</span><span class="n">sbin</span><span class="o">/</span><span class="n">kubectl</span> <span class="n">get</span> <span class="n">cm</span> <span class="k">global</span><span class="o">-</span><span class="n">var</span> <span class="o">-</span><span class="n">n</span> <span class="n">alauda</span><span class="o">-</span><span class="n">system</span> <span class="o">-</span><span class="n">o</span> <span class="n">json</span>
<span class="n">register</span><span class="p">:</span> <span class="n">cms</span><span class="o">&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
<span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>


<span class="o">&lt;</span><span class="n">h1</span><span class="o">&gt;</span><span class="n">use</span> <span class="n">from_json</span> <span class="n">plugin</span><span class="o">&lt;/</span><span class="n">h1</span><span class="o">&gt;</span>

<span class="o">&lt;</span><span class="n">ul</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">set_fact</span><span class="p">:</span> <span class="n">data</span><span class="o">=&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
<span class="o">&lt;</span><span class="n">li</span><span class="o">&gt;&lt;</span><span class="n">p</span><span class="o">&gt;</span><span class="n">name</span><span class="p">:</span> <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">read_config</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
<span class="n">shell</span><span class="p">:</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">local</span><span class="o">/</span><span class="nb">bin</span><span class="o">/</span><span class="n">redis</span><span class="o">-</span><span class="n">cli</span> <span class="o">-</span><span class="n">a</span>
<span class="n">when</span><span class="p">:</span> <span class="n">data</span><span class="p">[</span><span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">kind</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;]</span> <span class="o">==</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">ConfigMap</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;</span></code></pre></div></p></li>
<li><h4>ansible自定义模块执行命令支持管道</h4>

<p>自定义ansible module时，可以默认使用<code>AnsibleModule</code>的实例<code>run_command</code>来执行shell命令,可以指定use_unsafe_shell=True来让ansible支持管道。
use_shell会和shell模块类似，若不指定，默认为False，则以command模块运行，command是比较安全的隧道连接，但是不支持管道
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
  <span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">The</span> <span class="n">main</span> <span class="n">function</span><span class="o">.&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span>
  <span class="n">module</span> <span class="o">=</span> <span class="n">AnsibleModule</span><span class="p">(</span><span class="n">argument_spec</span><span class="o">=</span><span class="nb">dict</span><span class="p">(),</span><span class="n">supports_check_mode</span><span class="o">=</span><span class="bp">False</span><span class="p">)</span>
  <span class="n">module</span><span class="o">.</span><span class="n">run_command</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">local</span><span class="o">/</span><span class="n">sbin</span><span class="o">/</span><span class="n">kubectl</span> <span class="n">get</span> <span class="n">po</span> <span class="o">-</span><span class="n">n</span> <span class="n">alauda</span><span class="o">-</span><span class="n">system</span> <span class="o">|</span><span class="n">grep</span> <span class="n">alauda</span><span class="o">-</span><span class="n">redis</span><span class="o">|</span><span class="n">awk</span> \<span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">END</span><span class="p">{</span><span class="k">print</span> <span class="err">$</span><span class="mi">1</span><span class="p">}</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;,</span> <span class="n">use_unsafe_shell</span><span class="o">=</span><span class="bp">True</span><span class="p">)</span>
  <span class="n">redis</span> <span class="o">=</span> <span class="n">Redis</span><span class="p">(</span><span class="n">module</span><span class="p">)</span>
  <span class="n">rst</span> <span class="o">=</span> <span class="n">redis</span><span class="o">.</span><span class="n">get_redis_status</span><span class="p">()</span>
  <span class="n">module</span><span class="o">.</span><span class="n">exit_json</span><span class="p">(</span><span class="o">**</span><span class="n">rst</span><span class="p">)</span></code></pre></div></p></li>
</ul>


<!--more-->


<ul>
<li><h4>多进程执行ansible任务</h4>

<p>实现故障定位工具时为提高执行效率，打算采用多线程方式同时执行多个任务，使用<a href="http://localhost:4000/blog/2019/03/03/pythonduo-xian-cheng-zhi-xing-lei-fang-fa/">python多线程执行类方法</a>,
发现由于ansible自身已经实现了多线程执行，如果在多线程中再次包裹ansible的多线程的话，会遇到各种诡异的问题(非线程安全)，于是多线程调用多个ansible任务基本上行不通。
于是尝试使用多进程的方式，发现多进程下包裹ansible的多进程是可以正常运行的，与多线程方式不同的是，多线程需要使用multiprocessing的Manager管理共享数据，即需要在
主进程中传递Manager的变量到每个子进程中，否则主进程无法获取各子进程的数据。
<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="k">def</span> <span class="nf">main</span><span class="p">():</span>
  <span class="n">all_cls</span> <span class="o">=</span> <span class="n">get_all_subclasses</span><span class="p">(</span><span class="n">Collector</span><span class="p">)</span>
  <span class="n">manager</span> <span class="o">=</span> <span class="n">Manager</span><span class="p">()</span>
  <span class="n">results</span> <span class="o">=</span> <span class="n">manager</span><span class="o">.</span><span class="n">dict</span><span class="p">()</span>  <span class="c"># 多进程共享数据</span>
  <span class="n">processes</span> <span class="o">=</span> <span class="p">[]</span>  <span class="c"># 进程id</span>
  <span class="k">for</span> <span class="n">item</span><span class="p">,</span> <span class="n">value</span> <span class="ow">in</span> <span class="n">all_cls</span><span class="o">.</span><span class="n">items</span><span class="p">():</span>
      <span class="n">fn_collect</span> <span class="o">=</span> <span class="nb">getattr</span><span class="p">(</span><span class="n">value</span><span class="p">,</span> <span class="o">&amp;</span><span class="n">lsquo</span><span class="p">;</span><span class="n">grab</span><span class="o">&amp;</span><span class="n">rsquo</span><span class="p">;,</span> <span class="bp">None</span><span class="p">)</span>
      <span class="k">if</span> <span class="nb">callable</span><span class="p">(</span><span class="n">fn_collect</span><span class="p">):</span>
          <span class="n">p</span> <span class="o">=</span> <span class="n">Process</span><span class="p">(</span><span class="n">target</span><span class="o">=</span><span class="n">fn_collect</span><span class="p">,</span> <span class="n">name</span><span class="o">=</span><span class="n">item</span><span class="p">,</span> <span class="n">args</span><span class="o">=</span><span class="p">(</span><span class="n">item</span><span class="p">,</span> <span class="n">results</span><span class="p">))</span>
          <span class="n">processes</span><span class="o">.</span><span class="n">append</span><span class="p">(</span><span class="n">p</span><span class="p">)</span>
          <span class="n">p</span><span class="o">.</span><span class="n">start</span><span class="p">()</span>
          <span class="k">print</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="err">执行</span><span class="p">{</span><span class="mi">0</span><span class="p">}</span><span class="err">的</span><span class="n">collect</span> <span class="err">方法</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;</span><span class="o">.</span><span class="n">format</span><span class="p">(</span><span class="n">item</span><span class="p">))</span>
  <span class="k">for</span> <span class="n">p</span> <span class="ow">in</span> <span class="n">processes</span><span class="p">:</span>
      <span class="n">p</span><span class="o">.</span><span class="n">join</span><span class="p">()</span>  <span class="c">#</span>
  <span class="k">print</span><span class="p">(</span><span class="o">&amp;</span><span class="n">ldquo</span><span class="p">;</span><span class="n">main</span> <span class="n">done</span><span class="o">&amp;</span><span class="n">rdquo</span><span class="p">;)</span><span class="o">&lt;/</span><span class="n">p</span><span class="o">&gt;&lt;/</span><span class="n">li</span><span class="o">&gt;</span>
<span class="o">&lt;/</span><span class="n">ul</span><span class="o">&gt;</span>


<span class="o">&lt;</span><span class="n">p</span><span class="o">&gt;</span></code></pre></div></p>
]]></content>
  </entry>
  
</feed>
