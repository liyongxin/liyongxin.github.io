<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Earlene]]></title>
  <link href="http://liyongxin.github.io/atom.xml" rel="self"/>
  <link href="http://liyongxin.github.io/"/>
  <updated>2019-02-28T12:38:37+08:00</updated>
  <id>http://liyongxin.github.io/</id>
  <author>
    <name><![CDATA[yxli@alauda.io]]></name>
    <email><![CDATA[yxli@alauda.io]]></email>
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[k8s小知识]]></title>
    <link href="http://liyongxin.github.io/blog/2019/02/28/k8sxiao-zhi-shi/"/>
    <updated>2019-02-28T11:12:56+08:00</updated>
    <id>http://liyongxin.github.io/blog/2019/02/28/k8sxiao-zhi-shi</id>
    <content type="html"><![CDATA[<ul>
<li>k8s默认驱逐设置</li>
</ul>


<div class="highlight"><pre><code class="language-bash" data-lang="bash">// DefaultEvictionHard includes default options <span class="k">for</span> hard eviction.
var <span class="nv">DefaultEvictionHard</span> <span class="o">=</span> map<span class="o">[</span>string<span class="o">]</span>string<span class="o">{</span>
        <span class="s2">&quot;memory.available&quot;</span>:  <span class="s2">&quot;100Mi&quot;</span>,
        <span class="s2">&quot;nodefs.available&quot;</span>:  <span class="s2">&quot;10%&quot;</span>,
        <span class="s2">&quot;nodefs.inodesFree&quot;</span>: <span class="s2">&quot;5%&quot;</span>,
        <span class="s2">&quot;imagefs.available&quot;</span>: <span class="s2">&quot;15%&quot;</span>,
<span class="o">}</span></code></pre></div>


<ul>
<li>kubernetes 滚动升级</li>
</ul>


<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c"># run test deploy</span>
<span class="o">[</span>root@k8s-master ~<span class="o">]</span><span class="c"># kubectl run --image=nginx --port=80 --replicas=2 yxli-nginx</span>
<span class="c"># scale replica</span>
<span class="o">[</span>root@k8s-master ~<span class="o">]</span><span class="c"># kubectl scale --replicas=1 deploy/yxli-nginx</span>
<span class="o">[</span>root@k8s-master ~<span class="o">]</span><span class="c"># kubectl get deploy</span>
NAME         DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
busybox      <span class="m">2</span>         <span class="m">2</span>         <span class="m">2</span>            <span class="m">2</span>           39d
busybox1     <span class="m">1</span>         <span class="m">1</span>         <span class="m">1</span>            <span class="m">1</span>           39d
yxli-nginx   <span class="m">1</span>         <span class="m">1</span>         <span class="m">1</span>            <span class="m">1</span>           2h
<span class="c"># update image</span>
<span class="o">[</span>root@k8s-master ~<span class="o">]</span><span class="c"># kubectl set image  deploy/yxli-nginx yxli-nginx=nginx:alpine</span>
<span class="c"># 查看升级历史</span>
<span class="o">[</span>root@k8s-master ~<span class="o">]</span><span class="c"># kubectl rollout history deploy/yxli-nginx</span>
deployments <span class="s2">&quot;yxli-nginx&quot;</span>
REVISION  CHANGE-CAUSE
<span class="m">1</span>         &lt;none&gt;
<span class="m">2</span>         &lt;none&gt;
<span class="c"># 回顾至上次版本</span>
<span class="o">[</span>root@k8s-master ~<span class="o">]</span><span class="c"># kubectl rollout undo deploy/yxli-nginx</span>
<span class="o">[</span>root@k8s-master ~<span class="o">]</span><span class="c"># kubectl rollout history deploy/yxli-nginx</span>
deployments <span class="s2">&quot;yxli-nginx&quot;</span>
REVISION  CHANGE-CAUSE
<span class="m">2</span>         &lt;none&gt;
<span class="m">3</span>         &lt;none&gt;
<span class="c"># 回滚至指定版本</span>
<span class="o">[</span>root@k8s-master ~<span class="o">]</span><span class="c"># kubectl rolloutundo deployment/lykops-dpm --to-revision=2</span></code></pre></div>


<ul>
<li>查看docker使用的cpu核心数</li>
</ul>


<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="o">[</span>root@yxli-onebox docker<span class="o">]</span><span class="c"># pwd</span>
/sys/fs/cgroup/cpuset/docker
<span class="o">[</span>root@yxli-onebox docker<span class="o">]</span><span class="c"># cat cpuset.cpus</span>
0-7</code></pre></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[kubernetes 问题整理]]></title>
    <link href="http://liyongxin.github.io/blog/2018/08/31/kubernetes-wen-ti-zheng-li/"/>
    <updated>2018-08-31T10:36:27+08:00</updated>
    <id>http://liyongxin.github.io/blog/2018/08/31/kubernetes-wen-ti-zheng-li</id>
    <content type="html"><![CDATA[<p>本文用以kubernetes 运维过程中遇到问题汇总，方便日后回顾～</p>

<h2>kubernetes多网卡导致的问题</h2>

<p>部署机器是阿里云，有两块网卡，<code>eth0</code>外网，<code>eth1 vpc</code>内网，集群的路由信息如下</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="o">[</span>root@10 src<span class="o">]</span><span class="c"># route</span>
Kernel IP routing table
Destination     Gateway         Genmask         Flags Metric Ref    Use Iface
default         gateway         0.0.0.0         UG    <span class="m">0</span>      <span class="m">0</span>        <span class="m">0</span> eth1
10.0.0.0        10.81.35.247    255.0.0.0       UG    <span class="m">0</span>      <span class="m">0</span>        <span class="m">0</span> eth0
10.81.32.0      0.0.0.0         255.255.252.0   U     <span class="m">0</span>      <span class="m">0</span>        <span class="m">0</span> eth0
39.107.40.0     0.0.0.0         255.255.252.0   U     <span class="m">0</span>      <span class="m">0</span>        <span class="m">0</span> eth1
100.64.0.0      10.81.35.247    255.192.0.0     UG    <span class="m">0</span>      <span class="m">0</span>        <span class="m">0</span> eth0
link-local      0.0.0.0         255.255.0.0     U     <span class="m">1002</span>   <span class="m">0</span>        <span class="m">0</span> eth0
link-local      0.0.0.0         255.255.0.0     U     <span class="m">1003</span>   <span class="m">0</span>        <span class="m">0</span> eth1
172.16.0.0      10.81.35.247    255.240.0.0     UG    <span class="m">0</span>      <span class="m">0</span>        <span class="m">0</span> eth0
192.168.0.0     0.0.0.0         255.255.255.0   U     <span class="m">0</span>      <span class="m">0</span>        <span class="m">0</span> cni0
192.168.0.0     0.0.0.0         255.255.240.0   U     <span class="m">0</span>      <span class="m">0</span>        <span class="m">0</span> docker0
192.168.1.0     192.168.1.0     255.255.255.0   UG    <span class="m">0</span>      <span class="m">0</span>        <span class="m">0</span> flannel.1
192.168.2.0     192.168.2.0     255.255.255.0   UG    <span class="m">0</span>      <span class="m">0</span>        <span class="m">0</span> flannel.1</code></pre></div>


<ul>
<li><h4>docker0网段与cni0网段冲突问题</h4></li>
</ul>


<p>docker启动时没有指定bip，从上述路由规则发现，docker0使用了192.168的段,刚好给flannel设置的cidr段冲突，
所以需要给docker修改默认的网段，解决方法是给docker配置bip网段,然后重启docker，观察docker0的route规则</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="o">[</span>root@10 ~<span class="o">]</span><span class="c"># cat /etc/docker/daemon.json</span>
<span class="o">{</span>
    <span class="s2">&quot;insecure-registries&quot;</span>: <span class="o">[]</span>,
    <span class="s2">&quot;graph&quot;</span>: <span class="s2">&quot;/var/lib/docker&quot;</span>,
    <span class="s2">&quot;bip&quot;</span>: <span class="s2">&quot;172.17.0.1/16&quot;</span>,
    <span class="s2">&quot;registry-mirrors&quot;</span>: <span class="o">[</span><span class="s2">&quot;https://registry.docker-cn.com&quot;</span><span class="o">]</span>,
    <span class="s2">&quot;storage-driver&quot;</span>: <span class="s2">&quot;devicemapper&quot;</span>,
    <span class="s2">&quot;storage-opts&quot;</span>: <span class="o">[</span><span class="s2">&quot;dm.use_deferred_removal=true&quot;</span>, <span class="s2">&quot;dm.use_deferred_deletion=true&quot;</span><span class="o">]</span>,
    <span class="s2">&quot;storage-opts&quot;</span>: <span class="o">[</span>
        <span class="s2">&quot;dm.thinpooldev=/dev/mapper/docker-thinpool&quot;</span>,
        <span class="s2">&quot;dm.min_free_space=0%&quot;</span>,
        <span class="s2">&quot;dm.use_deferred_deletion=true&quot;</span>,
        <span class="s2">&quot;dm.use_deferred_removal=true&quot;</span>,
        <span class="s2">&quot;dm.fs=ext4&quot;</span>
    <span class="o">]</span>,
    <span class="s2">&quot;log-driver&quot;</span>: <span class="s2">&quot;fluentd&quot;</span>,
    <span class="s2">&quot;log-opts&quot;</span>:
    <span class="o">{</span>
        <span class="s2">&quot;fluentd-address&quot;</span>: <span class="s2">&quot;localhost:24224&quot;</span>,
        <span class="s2">&quot;tag&quot;</span>: <span class="s2">&quot;docker.&quot;</span>,
        <span class="s2">&quot;fluentd-async-connect&quot;</span>: <span class="s2">&quot;true&quot;</span>
    <span class="o">}</span>
<span class="o">}</span></code></pre></div>


<ul>
<li><h4>集群初始化问题</h4></li>
</ul>


<p>使用<code>kubeadm</code>搭建，若未指定&ndash;advertise-address地址则k8s默认拿default网卡，
而机器的default网卡刚好是外网eth0，所以初始化集群使用的地址是外网地址，导致一堆端口需要开，然后Node加入集群失败，解决办法是kubeadm初始化的
时候指定&ndash;advertise-address为内网地址,下面为kubeadm init使用的conf文件</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">apiVersion: kubeadm.k8s.io/v1alpha1
kind: MasterConfiguration
api:
  bindPort: 6443
etcd:
  endpoints:
  <span class="c">#sed -i &quot;/#ETCD_ENDPOINTS/a\  - http://123.456:2379/g&quot; ./abc.yml</span>
  <span class="c">#ETCD ENDPOINTS</span>
  - http://10.81.32.150:2379
apiServerExtraArgs:
  apiserver-count: <span class="s2">&quot;1&quot;</span>
  insecure-port: <span class="s2">&quot;8080&quot;</span>
  advertise-address<span class="o">=</span>10.81.32.150
  service-node-port-range: <span class="s2">&quot;30000-32000&quot;</span>
  admission-control: <span class="s2">&quot;Initializers,NamespaceLifecycle,LimitRanger,ServiceAccount,PersistentVolumeLabel,DefaultStorageClass,DefaultTolerationSeconds,ResourceQuota&quot;</span>
  feature-gates: <span class="s2">&quot;MountPropagation=true&quot;</span>
  endpoint-reconciler-type: <span class="s2">&quot;lease&quot;</span>
controllerManagerExtraArgs:
  pod-eviction-timeout: <span class="s2">&quot;30s&quot;</span>
  node-monitor-period: <span class="s2">&quot;2s&quot;</span>
  node-monitor-grace-period: <span class="s2">&quot;16s&quot;</span>
controllerManagerExtraVolumes:
- name: k8s
  hostPath: /etc/kubernetes
  mountPath: /etc/kubernetes
imageRepository: index.docker.cn/claas
networking:
  podSubnet: 192.168.0.0/16
kubernetesVersion: v1.9.6
token: 8d775a.8f70da6999842a27
tokenTTL: <span class="s2">&quot;0&quot;</span>
apiServerCertSANs:
- 127.0.0.1
- amazonaws.com.cn
- amazonaws.com
- 10.81.32.150
- 10.81.32.150</code></pre></div>


<ul>
<li><h4>flannel网络问题</h4>

<p>多网卡导致flannel网络选择网卡错误,flannel在初始化的时候会默认找defalut网卡，如果需要指定，则在flannel的
初始化yaml文件中通过&ndash;iface指定网卡，</p></li>
</ul>


<div class="highlight"><pre><code class="language-bash" data-lang="bash">... ...
      containers:
      - name: kube-flannel
        image: index.alauda.cn/claas/flannel:v0.9.1
        <span class="nb">command</span>: <span class="o">[</span> <span class="s2">&quot;/opt/bin/flanneld&quot;</span>, <span class="s2">&quot;--ip-masq&quot;</span>, <span class="s2">&quot;--kube-subnet-mgr&quot;</span>, <span class="s2">&quot;--iface=eth0&quot;</span><span class="o">]</span>
        securityContext:
          privileged: <span class="nb">true</span>
<span class="nb">        </span>env:
  ... ...</code></pre></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[kubelet的认证]]></title>
    <link href="http://liyongxin.github.io/blog/2018/08/25/kubeletde-ren-zheng/"/>
    <updated>2018-08-25T18:17:17+08:00</updated>
    <id>http://liyongxin.github.io/blog/2018/08/25/kubeletde-ren-zheng</id>
    <content type="html"><![CDATA[<p>研究完<a href="../kuberneteszhong-de-ren-zheng-xiang-guan">kubectl的认证与授权</a>，使用相同的方式去找kubelet的访问，
首先定位配置文件<code>/etc/kubernetes/kubelet.conf</code>，然后用相同的方式对<code>client-key-data</code>做base64解码，保存为kubelet.crt文件。</p>

<p>openssl查看crt证书，</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="o">[</span>root@k8s-master kubernetes<span class="o">]</span><span class="c"># openssl x509 -text -in kubelet.crt -noout</span>
Certificate:
    Data:
        Version: <span class="m">3</span> <span class="o">(</span>0x2<span class="o">)</span>
        Serial Number: <span class="m">8126553944389053218</span> <span class="o">(</span>0x70c751c18f5beb22<span class="o">)</span>
    Signature Algorithm: sha256WithRSAEncryption
        Issuer: <span class="nv">CN</span><span class="o">=</span>kubernetes
        Validity
            Not Before: Aug <span class="m">20</span> 05:50:39 <span class="m">2018</span> GMT
            Not After : Aug <span class="m">20</span> 05:50:42 <span class="m">2019</span> GMT
        Subject: <span class="nv">O</span><span class="o">=</span>system:nodes, <span class="nv">CN</span><span class="o">=</span>system:node:k8s-master
        Subject Public Key Info:
            Public Key Algorithm: rsaEncryption
                Public-Key: <span class="o">(</span><span class="m">2048</span> bit<span class="o">)</span>
                Modulus:
                    00:9f:92:83:49:aa:cc:52:0e:de:bd:af:a6:fd:ef:
    ... ...</code></pre></div>


<p>得到我们期望的内容：</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">Subject: <span class="nv">O</span><span class="o">=</span>system:nodes, <span class="nv">CN</span><span class="o">=</span>system:node:k8s-master</code></pre></div>


<blockquote><p>关于Subject，在k8s中可以理解为角色绑定主体，RoleBinding或者ClusterRoleBinding可以将角色绑定到角色绑定主体（Subject）。
角色绑定主体可以是用户组（Group）、用户（User）或者服务账户（Service Accounts）</p></blockquote>

<p>然后我尝试去k8s中找到一些关于<code>system:nodes</code>的RoleBindings或者ClusterRoleBindings,</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="o">[</span>root@k8s-master kubernetes<span class="o">]</span><span class="c"># for bd in `kubectl get clusterrolebindings |awk &#39;{print $1}&#39;`; do echo $bd;kubectl get clusterrolebindings $bd -o yaml|grep &#39;system:nodes&#39;;done</span>
NAME
Error from server <span class="o">(</span>NotFound<span class="o">)</span>: clusterrolebindings.rbac.authorization.k8s.io <span class="s2">&quot;NAME&quot;</span> not found
cluster-admin
flannel
kubeadm:kubelet-bootstrap
kubeadm:node-autoapprove-bootstrap
kubeadm:node-autoapprove-certificate-rotation
  name: system:nodes
kubeadm:node-proxier
system:aws-cloud-provider
system:basic-user
... ...</code></pre></div>


<p>结局有点意外，除了<code>kubeadm:node-autoapprove-certificate-rotation</code>外，没有找到system相关的rolebindings，显然和我们的理解不一样。
尝试去找<a href="https://github.com/rootsongjc/kubernetes-handbook/blob/master/guide/rbac.md">资料</a>，发现了这么一段</p>

<p><img src="http://liyongxin.github.io/images/rbac.png" alt="" /></p>

<p>Kubernetes 1.7开始, apiserver的启动中默认增加了<code>--authorization-mode=Node,RBAC</code>,也就是说，除了RBAC外，还有Node这种特殊的授权方式，</p>

<p>继续查找<a href="https://kubernetes.io/docs/reference/access-authn-authz/node/">kubernetes官方的信息</a>,得知</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">Node authorization is a special-purpose authorization mode that specifically authorizes API requests made by kubelets.</code></pre></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[kubectl的认证与授权]]></title>
    <link href="http://liyongxin.github.io/blog/2018/08/25/kuberneteszhong-de-ren-zheng-xiang-guan/"/>
    <updated>2018-08-25T14:41:00+08:00</updated>
    <id>http://liyongxin.github.io/blog/2018/08/25/kuberneteszhong-de-ren-zheng-xiang-guan</id>
    <content type="html"><![CDATA[<p>关于k8s认证、授权相关的基础，只简单回顾，具体内容先参考如下文章：</p>

<ul>
<li><a href="https://kubernetes.io/docs/reference/access-authn-authz/controlling-access/">Controlling Access to the Kubernetes API</a></li>
<li><a href="https://jimmysong.io/posts/user-authentication-in-kubernetes/">Kubernetes 中的用户与身份认证授权</a></li>
<li><a href="https://github.com/rootsongjc/kubernetes-handbook/blob/master/guide/rbac.md">Kubernetes RBAC - 基于角色的访问控制</a></li>
</ul>


<h2>Kubernetes API的访问控制原理回顾</h2>

<p>Kubernetes集群的访问权限控制由<code>kube-apiserver</code>负责，<code>kube-apiserver</code>的访问权限控制由身份验证(authentication)、授权(authorization)
和准入控制（admission control）三步骤组成，这三步骤是按序进行的：
<img src="http://liyongxin.github.io/images/k8s-apiserver-access-control-overview.svg" alt="" /></p>

<h4>身份验证（Authentication）</h4>

<p>这个环节它面对的输入是整个<code>http request</code>，它负责对来自client的请求进行身份校验，支持的方法包括：client证书验证（https双向验证）、
<code>basic auth</code>、普通token以及<code>jwt token</code>(用于serviceaccount)。</p>

<p>APIServer启动时，可以指定一种Authentication方法，也可以指定多种方法。如果指定了多种方法，那么APIServer将会逐个使用这些方法对客户端请求进行验证，
只要请求数据通过其中一种方法的验证，APIServer就会认为Authentication成功；</p>

<p>在较新版本kubeadm引导启动的k8s集群的apiserver初始配置中，默认支持<code>client证书</code>验证和<code>serviceaccount</code>两种身份验证方式。
证书认证通过设置<code>--client-ca-file</code>根证书以及<code>--tls-cert-file</code>和<code>--tls-private-key-file</code>来开启。</p>

<p>在这个环节，apiserver会通过client证书或
<code>http header</code>中的字段(比如serviceaccount的<code>jwt token</code>)来识别出请求的<code>用户身份</code>，包括”user”、”group”等，这些信息将在后面的<code>authorization</code>环节用到。</p>

<h4>授权（Authorization）</h4>

<p>这个环节面对的输入是<code>http request context</code>中的各种属性，包括：<code>user</code>、<code>group</code>、<code>request path</code>（比如：<code>/api/v1</code>、<code>/healthz</code>、<code>/version</code>等）、
<code>request verb</code>(比如：<code>get</code>、<code>list</code>、<code>create</code>等)。</p>

<p>APIServer会将这些属性值与事先配置好的访问策略(<code>access policy</code>）相比较。APIServer支持多种<code>authorization mode</code>，包括<code>Node、RBAC、Webhook</code>等。</p>

<p>APIServer启动时，可以指定一种<code>authorization mode</code>，也可以指定多种<code>authorization mode</code>，如果是后者，只要Request通过了其中一种mode的授权，
那么该环节的最终结果就是授权成功。在较新版本kubeadm引导启动的k8s集群的apiserver初始配置中，<code>authorization-mode</code>的默认配置是<code>”Node,RBAC”</code>。</p>

<p>Node授权器主要用于各个node上的kubelet访问apiserver时使用的，其他一般均由RBAC授权器来授权。</p>

<h2>kubectl的授权认证</h2>

<p><code>kubeadm init</code>启动完master节点后，会默认输出类似下面的提示内容：</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">... ...
Your Kubernetes master has initialized successfully!

To start using your cluster, you need to run the following as a regular user:
  mkdir -p <span class="nv">$HOME</span>/.kube
  sudo cp -i /etc/kubernetes/admin.conf <span class="nv">$HOME</span>/.kube/config
  sudo chown <span class="k">$(</span>id -u<span class="k">)</span>:<span class="k">$(</span>id -g<span class="k">)</span> <span class="nv">$HOME</span>/.kube/config
... ...</code></pre></div>


<p>这些信息是在告知我们如何配置<code>kubeconfig</code>文件。按照上述命令配置后，master节点上的<code>kubectl</code>就可以直接使用<code>$HOME/.kube/config</code>的信息访问<code>k8s cluster</code>了。
并且，通过这种配置方式，<code>kubectl</code>也拥有了整个集群的管理员(root)权限。</p>

<p>很多K8s初学者在这里都会有疑问：</p>

<ul>
<li>当<code>kubectl</code>使用这种<code>kubeconfig</code>方式访问集群时，<code>Kubernetes</code>的<code>kube-apiserver</code>是如何对来自<code>kubectl</code>的访问进行身份验证(<code>authentication</code>)和授权(<code>authorization</code>)的呢？</li>
<li>为什么来自<code>kubectl</code>的请求拥有最高的管理员权限呢？</li>
</ul>


<h4>kubectl的身份认证（authentication）</h4>

<p>我们先从kubectl使用的<code>kubeconfig</code>入手。kubectl使用的kubeconfig文件实质上就是<code>kubeadm init</code>过程中生成的<code>/etc/kubernetes/admin.conf</code>，
我们查看一下该kubeconfig文件的内容：</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="o">[</span>root@k8s-master kubernetes<span class="o">]</span><span class="c"># kubectl config view</span>
apiVersion: v1
clusters:
- cluster:
    certificate-authority-data: REDACTED
    server: https://192.168.8.33:6443
  name: kubernetes
contexts:
- context:
    cluster: kubernetes
    user: kubernetes-admin
  name: kubernetes-admin@kubernetes
current-context: kubernetes-admin@kubernetes
kind: Config
preferences: <span class="o">{}</span>
users:
- name: kubernetes-admin
  user:
    client-certificate-data: REDACTED
    client-key-data: REDACTED</code></pre></div>


<p>关于kubeconfig文件的解释，可以在<a href="https://kubernetes.io/docs/concepts/configuration/organize-cluster-access-kubeconfig/">这里</a>自行脑补。在这些输出信息中，我们着重提取到两个信息：</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">user name: kubernetes-admin
client-certificate-data: XXXX</code></pre></div>


<p>前面提到过apiserver的authentication支持通过<code>tls client certificate、basic auth、token</code>等方式对客户端发起的请求进行身份校验，
从kubeconfig信息来看，kubectl显然在请求中使用了<code>tls client certificate</code>的方式，即客户端的证书。另外我们知道Kubernetes是没有user这种资源的，
通过k8s API也无法创建user。</p>

<p>那么kubectl的身份信息就应该“隐藏”在<code>client-certificate</code>的数据中，我们来查看一下。</p>

<p>首先把<code>/etc/kubernetes/kubelet.conf</code>中的<code>client-key-data</code>内容保存在<code>admin-client-certificate.txt</code>中</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="o">[</span>root@k8s-master kubernetes<span class="o">]</span><span class="c"># cat admin-client-certificate.txt</span>
<span class="nv">LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBbjVLRFNhck1VZzdldmErbS9lOCswQ0tSaUl4ajY4a1lwazBYbFBEcEN4WmtLVWhpCkt2K0lqZG80RUFvWG5SWThHRUEvaUpVbmUyNzJBU3ZIeXB0OGFwOWtha3l6ZEZ1bXlKbmV2TjBuWldYeEFkQXMKUTlmcUZyVGcyTTFpTjJPYjFPb3VnR2pHenJ6bEw3Wm5xc3hQcHppOEtCeEVsM0dUVGFLVG5hSzFRWDUwNkt2aApIVkdXMTdkazZLWEltZDZhYWo0VmNNOXJaeEZ5bCs3SzFyQ2hPWXBhNzJUYWpqdEtuZm9FdzNxV0tmb0JXclBkCjJCRDhSaW4vcmlEbGNKTy9GRUt3azJQb1ZrcWx4bzdObWtld0Zma2txTVJrOHY3WTZVUTNvT1lhVDdsMFV0bEUKVzdCaEw1U0lkcTZIbGVzVU1CQkk4NDZEMnFZNk4zdGlndTFES3dJREFRQUJBb0lCQUFjMlJmekVYV3V3QkYwcQpYUy9JNmx2WjFCNEp5bEpUeW10cHZKRWN1a3VuL1dyb1BKZVk2UUVRUmN4anlHRnZLZFFtd3poWEZXdTh2aDJiCmJ2STNTTTVBMmZiNzlIaGoxQXZvK0dvc3pLVUdrSGYyZ3FtbVRvd3NMS1ZmMHZxUjQrOGhqbXg3VDlEME5KK04KYk80SlFlaGE1aFlpQU8rZlVIc0h5QWd0M0dkVFQ0eEh6elBzYjd0dXAxd1hJUVp5SnRkSTR1MGdaMmJFcUw2dQpGdm12RlF2RzY0S1dtQ0Eydk9zclNpb1QxTGpFMDJuZk11dWhvbEhxRVoxNEx4Lzk0elI4MXlYMjV2MnBCVE9yCitvOFBYNGhtUEprckJCVUNvQVZrSmlCYmVqMUh4TW1iQXlhM2ZlaXZBR01LcXh6b2wrVkltUmUwVE8xNk1WbWoKT1dzRGJYRUNnWUVBeW84aUNRR05iQ0p3QzIvOEkzaXU2TktGc2ZYZ08waC9RT0xhbGlReWlzbEx3anBadXNrVQpsaE1zR0xkQUFoZDVrZmVpTUF1UHRPbHNxb1NjeE80eDh1RUFqcUtndklVMHR1NjFjYWFPV29BTnczMkt2bDRnCk05UmxRbFVDMXRRT0htdFRsdURrSmRUQWFGQSswYjFMeVBnZFNlamV1eFl3dlR1MHV1R1BXNlVDZ1lFQXlhd0wKNEcyN05VT0JpSmpGalNPdGEvcjJtVHpEbFNPVUl6NlpyandVd1ZHbTQvRXdPZmx6czROYWd3R0RHK0tvM2lDagpySVJnUkhaMktCWXNjQUlKQk4xWVNpVjZxVzgvaEUzT3k0Y0EySFVZd1NmTktXNXZQSUNMcnVaMGxZWTJlcHFlClZLZXZUNUJWMlJvK3gxZFo2TE4vcXk0c3RHTzhTYWp0b1FxUUtvOENnWUFiQmNOTm5rWm1vYVYrOFI2YkFOT2MKdmRFV0w2NE5XcHVYWld3eDBYeG9wWGdVM2tId09Ea2wyRUx1dlN1dDI4SGRKa01kMDcwRkxvclBxTWRkUWtXcAptRGpCenBKUTlCaFhPenM3Z1RQR2dRVFZDcCtDeS8zUnpFa0I4Mk5nazRPYXJVakdmUlFTcy9KRE9FbFpJNzdECmZjNHllUDJWeWQwUXNiRm5xUVc5L1FLQmdRQzhZblU1c09jV2F6ZStCSTlOTjAyUk4zNVJTRnllblB5Tks3WGMKOXd5Z1JRaXpscUpwRldjS0FpSnppOThRRmx1T0cwa3BKd0xTRVNKd2NiNFM1eVBMb29RTnh4TGM0U21oQ2htcApMelFQL3RvZjNIRWVTYVdwQzU3dnd5Q1dhQ2ZOd1U4elh1dzVVMmVPQktFdURwL1M2cEhRc3JKWjAyeVlGaS9iCnBnVmphd0tCZ1FDbS9sejBRWXFUUFlQcG93RHpSZE84K1VaUmNVRHFKcFZ4TmdpRVdWN0pUN09qaENxVDdMUFAKQkZMYzdCY2hYTElMaElxOGhHNmJrL2dvNWt1TzhuMWpOTjFPTlNMaHh6RVp2VVgva000RE5FYjRaLzVON1JxWAp0Q0hMeFNDZXFUZVJ6K1FXRGRFL2pXaklEcU9McEdUVjdVbXJKN2kvU04rcE02dHZTWVFSUlE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo</span><span class="o">=</span></code></pre></div>


<p>然后对上述内容base64解密，然后存储在<code>admin.crt</code>文件中</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="o">[</span>root@k8s-master kubernetes<span class="o">]</span><span class="c"># cat admin-client-certificate.txt |base64 -d &gt; admin.crt</span>
<span class="o">[</span>root@k8s-master kubernetes<span class="o">]</span><span class="c"># cat admin.crt</span>
-----BEGIN CERTIFICATE-----
MIIC8jCCAdqgAwIBAgIIQD98S9X+SVUwDQYJKoZIhvcNAQELBQAwFTETMBEGA1UE
AxMKa3ViZXJuZXRlczAeFw0xODA4MjAwNTUwMzlaFw0xOTA4MjAwNTUwNDFaMDQx
FzAVBgNVBAoTDnN5c3RlbTptYXN0ZXJzMRkwFwYDVQQDExBrdWJlcm5ldGVzLWFk
bWluMIIBIjANBgkqhkiG9w0BAQEFAAOCAQ8AMIIBCgKCAQEAs5Rpnr5a68Cp4/EC
1IeebFl1z3ixDVT3pwR5YZgfy5E98IYB42c3fFrgV6fOuewOaW3bwrS9SZ4NMqB9
6TYXlZYkwxeQIp1HE+VSdbAHww7XE8zizv9/BSEynSqDglodmmDres0Cs9/3PG2F
B9OcAVycRzvxx87iecSzRwVF5DoopFbYkPJY/OjTQMeO8LX8YvoBYCD0ZpHxu7NE
b9qdUhPKH7ExbgSsSVZ75npjNtdDzlFzD4+tyYkvpBIYttOWHMFMQhipOyG+t1Af
ydVHzzsiAxgA/00ulxNCvhx1WXN+mL3PeDeBYMSFWo6cg60ih0nnNPk3rezrHoAg
294QxwIDAQABoycwJTAOBgNVHQ8BAf8EBAMCBaAwEwYDVR0lBAwwCgYIKwYBBQUH
AwIwDQYJKoZIhvcNAQELBQADggEBAFQ9ZvPCQsQQVR1kszsHip3qqcmIwUlkJiF6
YUVRzeG/QG15dIid5i87q5ZyK+NZhsuBrROnNUDSlg77jD61iHw+jREWd1pYAoK3
OyLcFd5q73xp+0aP1yEsRDnTmb7gzvKAYnFwKue7OZOVfpzWk0qakWkaPrzx6Bzp
G62X6p6701sL+9Gru56M8+tp+3/z635Z+56VjAFErzs5Sv5Pw5eAYxA12ebigNeh
0fIpVyPSZtA1MYgkbtqvjR6qxpgQUBvTCL7unNOGmdrvZI73fDLl+tTvlcgFDWcm
jlt8d2/5x/55BAfH/6LfqzfbDfOqlicKYvogLa7QE/A0uquVjLg<span class="o">=</span>
-----END CERTIFICATE-----</code></pre></div>


<p>然后用openssl工具查看crt证书内容</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="o">[</span>root@k8s-master kubernetes<span class="o">]</span><span class="c"># openssl x509 -text -in admin.crt -noout</span>
Certificate:
    Data:
        Version: <span class="m">3</span> <span class="o">(</span>0x2<span class="o">)</span>
        Serial Number: <span class="m">4629555607114762581</span> <span class="o">(</span>0x403f7c4bd5fe4955<span class="o">)</span>
    Signature Algorithm: sha256WithRSAEncryption
        Issuer: <span class="nv">CN</span><span class="o">=</span>kubernetes
        Validity
            Not Before: Aug <span class="m">20</span> 05:50:39 <span class="m">2018</span> GMT
            Not After : Aug <span class="m">20</span> 05:50:41 <span class="m">2019</span> GMT
        Subject: <span class="nv">O</span><span class="o">=</span>system:masters, <span class="nv">CN</span><span class="o">=</span>kubernetes-admin
        Subject Public Key Info:
            Public Key Algorithm: rsaEncryption
            ... ...</code></pre></div>


<p>从证书输出的信息中，我们看到了下面这行：</p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">Subject</span><span class="p">:</span> <span class="n">O</span><span class="o">=</span><span class="n">system</span><span class="p">:</span><span class="n">masters</span><span class="p">,</span> <span class="n">CN</span><span class="o">=</span><span class="n">kubernetes</span><span class="o">-</span><span class="n">admin</span></code></pre></div>


<p>说明在认证阶段，<code>apiserver</code>会首先使用<code>--client-ca-file</code>配置的CA证书去验证kubectl提供的证书的有效性,基本的方式</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="o">[</span>root@k8s-master kubernetes<span class="o">]</span><span class="c"># openssl verify -CAfile /etc/kubernetes/pki/ca.crt /etc/kubernetes/admin.crt</span>
/etc/kubernetes/admin.crt: OK</code></pre></div>


<p>然后认证通过后，提取出签发证书时指定的CN(Common Name),<code>kubernetes-admin</code>，作为请求的用户名 (User Name),
O(Organization)， 从证书中提取该字段作为请求用户所属的组 (Group)，<code>group = system:masters</code>，然后传递给后面的授权模块</p>

<blockquote><p>X509 客户端证书
通过将 &ndash;client-ca-file=SOMEFILE 选项传递给 API server 来启用客户端证书认证。引用的文件必须包含一个或多个证书颁发机构，用于验证提交给 API server 的客户端证书。如果客户端证书已提交并验证，则使用 subject 的 Common Name（CN）作为请求的用户名。从 Kubernetes 1.4开始，客户端证书还可以使用证书的 organization 字段来指示用户的组成员身份。</p></blockquote>

<h4>kubectl的授权</h4>

<p>kubeadm在init初始引导集群启动过程中，创建了许多<code>default</code>的<code>role、clusterrole、rolebinding</code>和<code>clusterrolebinding</code>，
在k8s有关RBAC的官方文档中，我们看到下面一些<code>default clusterrole</code>列表:</p>

<p><img src="http://liyongxin.github.io/images/kubeadm-default-clusterrole-list.png" alt="" />
其中第一个cluster-admin这个cluster role binding绑定了system:masters group，这和authentication环节传递过来的身份信息不谋而合。
沿着system:masters group对应的cluster-admin clusterrolebinding“追查”下去，真相就会浮出水面。</p>

<p>我们查看一下这一binding：</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="o">[</span>root@k8s-master kubernetes<span class="o">]</span><span class="c"># kubectl get clusterrolebinding/cluster-admin -n kube-system -o yaml</span>
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRoleBinding
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: <span class="s2">&quot;true&quot;</span>
  creationTimestamp: 2018-08-20T05:51:30Z
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  name: cluster-admin
  resourceVersion: <span class="s2">&quot;93&quot;</span>
  selfLink: /apis/rbac.authorization.k8s.io/v1/clusterrolebindings/cluster-admin
  uid: 163adc34-a43d-11e8-89a4-000c2948e532
roleRef:
  apiGroup: rbac.authorization.k8s.io
  kind: ClusterRole
  name: cluster-admin
subjects:
- apiGroup: rbac.authorization.k8s.io
  kind: Group
  name: system:masters</code></pre></div>


<p> 我们看到在kube-system名字空间中，一个名为cluster-admin的clusterrolebinding将cluster-admin cluster role与system:masters Group绑定到了一起，
 赋予了所有归属于system:masters Group中用户cluster-admin角色所拥有的权限。</p>

<p> 我们再来查看一下cluster-admin这个role的具体权限信息：</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="o">[</span>root@k8s-master kubernetes<span class="o">]</span><span class="c"># kubectl get clusterrole/cluster-admin -n kube-system -o yaml</span>
apiVersion: rbac.authorization.k8s.io/v1
kind: ClusterRole
metadata:
  annotations:
    rbac.authorization.kubernetes.io/autoupdate: <span class="s2">&quot;true&quot;</span>
  creationTimestamp: 2018-08-20T05:51:30Z
  labels:
    kubernetes.io/bootstrapping: rbac-defaults
  name: cluster-admin
  resourceVersion: <span class="s2">&quot;40&quot;</span>
  selfLink: /apis/rbac.authorization.k8s.io/v1/clusterroles/cluster-admin
  uid: 15f71927-a43d-11e8-89a4-000c2948e532
rules:
- apiGroups:
  - <span class="s1">&#39;*&#39;</span>
  resources:
  - <span class="s1">&#39;*&#39;</span>
  verbs:
  - <span class="s1">&#39;*&#39;</span>
- nonResourceURLs:
  - <span class="s1">&#39;*&#39;</span>
  verbs:
  - <span class="s1">&#39;*&#39;</span></code></pre></div>


<p>从rules列表中来看，cluster-admin这个角色对所有resources、verbs、apiGroups均有无限制的操作权限，
即整个集群的root权限。于是kubectl的请求就可以操控和管理整个集群了。</p>

<h3>疑问</h3>

<p>使用kubeadm-1.11.2版本初始化集群，即使不配置.kube/config文件，也可以直接访问到kubernetes cluster,
<a href="https://kubernetes.io/docs/setup/independent/create-cluster-kubeadm/">官方文档</a>中对这块的记录如下：</p>

<p>To make kubectl work for your non-root user, run these commands, which are also part of the kubeadm init output:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">mkdir -p <span class="nv">$HOME</span>/.kube
sudo cp -i /etc/kubernetes/admin.conf <span class="nv">$HOME</span>/.kube/config
sudo chown <span class="k">$(</span>id -u<span class="k">)</span>:<span class="k">$(</span>id -g<span class="k">)</span> <span class="nv">$HOME</span>/.kube/config</code></pre></div>


<p>Alternatively, if you are the root user, you can run:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">export </span><span class="nv">KUBECONFIG</span><span class="o">=</span>/etc/kubernetes/admin.conf</code></pre></div>


<ul>
<li>关于非root用户，尝试新建了用户，且没有配置kubeconfig文件的情况下，依然可以通过kubectl直接访问集群。</li>
<li>关于<code>KUBECONFIG</code>环境变量，发现未设置该env，而且尝试把<code>/etc/kubernetes/admin.conf</code> 文件删除掉，重启apiserver的情况，依然可以访问</li>
</ul>


<p>关于以上疑问已经弄明白，当我们在master节点中使用kubectl请求时，如果没有设置$HOME/.kube/config文件，则默认是通过本地的非安全端口来访问
apiserver，</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="o">[</span>root@ip-172-31-10-236 centos<span class="o">]</span><span class="c"># kubectl get no -v 7</span>
I0930 06:55:41.036661   <span class="m">13865</span> cached_discovery.go:72<span class="o">]</span> returning cached discovery info from /root/.kube/cache/discovery/localhost_8080/alauda.io/v3/serverresources.json
I0930 06:55:41.037250   <span class="m">13865</span> cached_discovery.go:72<span class="o">]</span> returning cached discovery info from /root/.kube/cache/discovery/localhost_8080/v1/serverresources.json
I0930 06:55:41.037484   <span class="m">13865</span> round_trippers.go:383<span class="o">]</span> GET http://localhost:8080/api/v1/nodes
I0930 06:55:41.037502   <span class="m">13865</span> round_trippers.go:390<span class="o">]</span> Request Headers:
I0930 06:55:41.037515   <span class="m">13865</span> round_trippers.go:393<span class="o">]</span>     Accept: application/json
I0930 06:55:41.037528   <span class="m">13865</span> round_trippers.go:393<span class="o">]</span>     User-Agent: kubectl/v1.7.3 <span class="o">(</span>linux/amd64<span class="o">)</span> kubernetes/2c2fe6e
I0930 06:55:41.046449   <span class="m">13865</span> round_trippers.go:408<span class="o">]</span> Response Status: <span class="m">200</span> OK in <span class="m">8</span> milliseconds
I0930 06:55:41.067926   <span class="m">13865</span> cached_discovery.go:119<span class="o">]</span> returning cached discovery info from /root/.kube/cache/discovery/localhost_8080/servergroups.json
I0930 06:55:41.068015   <span class="m">13865</span> cached_discovery.go:72<span class="o">]</span> returning cached discovery info from /root/.kube/cache/discovery/localhost_8080/apiregistration.k8s.io/v1beta1/serverresources.json</code></pre></div>


<p> 如果</p>

<h3>小结</h3>

<p>总结一下kubectl的认证过程：</p>

<p><img src="http://liyongxin.github.io/images/how-kubectl-be-authorized.png" alt="" /></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[javascript运行顺序详解]]></title>
    <link href="http://liyongxin.github.io/blog/2018/05/17/javascriptyun-xing-shun-xu-xiang-jie/"/>
    <updated>2018-05-17T20:30:37+08:00</updated>
    <id>http://liyongxin.github.io/blog/2018/05/17/javascriptyun-xing-shun-xu-xiang-jie</id>
    <content type="html"><![CDATA[<p>JavaScript是一种描述型脚本语言，它不同于java或C#等编译性语言,它不需要进行编译成中间语言,而是由浏览器进行动态地解析与执行。如果你不能理解javaScript语言的运行机制，或者简单地说，你不能掌握javascript的执行顺序，那你就犹如伯乐驾驭不了千里马，让千里马脱缰而出，四处乱窜。
那么JavaScript是怎么来进行解析的吗？它的执行顺序又是如何的呢？在了解这些之前，我们先来认识几个重要的术语：</p>

<h3>代码块</h3>

<p><code>JavaScript</code>中的代码块是指由<code>&lt;script&gt;</code>标签分割的代码段。例如：</p>

<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="c1">// 示例代码</span>
<span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;</span>
      <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;这是代码块一&quot;</span><span class="p">);</span>
<span class="o">&lt;</span><span class="err">/script&gt;</span>

<span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;</span>
      <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;这是代码块二&quot;</span><span class="p">);</span>
<span class="o">&lt;</span><span class="err">/script&gt;</span></code></pre></div>


<p>JS是按照代码块来进行编译和执行的，代码块间相互独立，但变量和方法共享。什么意思呢? 举个例子，你就明白了：</p>

<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;</span>
    <span class="nx">alert</span><span class="p">(</span><span class="nx">str</span><span class="p">);</span>   <span class="c1">//因为没有定义str，所以浏览器会出错，下面的不能运行</span>
    <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;我是代码块一&quot;</span><span class="p">);</span>  <span class="c1">//没有运行到这里</span>
    <span class="kd">var</span> <span class="nx">test</span> <span class="o">=</span> <span class="s2">&quot;我是代码块一变量&quot;</span><span class="p">;</span>
<span class="o">&lt;</span><span class="err">/script&gt;</span>

<span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;</span>
    <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;我是代码块二&quot;</span><span class="p">);</span>  <span class="c1">//这里有运行到</span>
    <span class="nx">alert</span><span class="p">(</span><span class="nx">test</span><span class="p">);</span>  <span class="c1">//弹出&quot;我是代码块一变量&quot;</span>
<span class="o">&lt;</span><span class="err">/script&gt;</span></code></pre></div>


<p>上面的代码中代码块一中运行报错，但不影响代码块二的执行，这就是代码块间的独立性，而代码块二中能调用到代码一中的变量，则是块间共享性。</p>

<!--more-->


<h3>声明式函数与赋值式函数</h3>

<p>JS中的函数定义分为两种：声明式函数与赋值式函数。</p>

<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;</span>
    <span class="kd">function</span> <span class="nx">Fn</span><span class="p">(){</span>
      <span class="c1">//声明式函数</span>
    <span class="p">}</span>
    <span class="kd">var</span> <span class="nx">Fn</span> <span class="o">=</span> <span class="kd">function</span><span class="p">{</span>
      <span class="c1">//赋值式函数</span>
    <span class="p">}</span>
<span class="o">&lt;</span><span class="err">/script&gt;</span></code></pre></div>


<p>声明式函数与赋值式函数的区别在于：在JS的预编译期，声明式函数将会先被提取出来，然后才按顺序执行js代码。</p>

<h3>预编译期与执行期</h3>

<p>事实上，JS的解析过程分为两个阶段：预编译期(预处理)与执行期。
预编译期JS会对本代码块中的所有声明的变量和函数进行处理（类似与C语言的编译），但需要注意的是此时处理函数的只是声明式函数，而且变量也只是进行了声明但未进行初始化以及赋值。</p>

<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;</span>
    <span class="nx">Fn</span><span class="p">();</span>  <span class="c1">//执行结果：&quot;执行了函数2&quot;,同名函数后者会覆盖前者</span>
      <span class="kd">function</span> <span class="nx">Fn</span><span class="p">(){</span> <span class="c1">//函数1</span>
      <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;执行了函数1&quot;</span><span class="p">);</span>
    <span class="p">}</span>

    <span class="kd">function</span> <span class="nx">Fn</span><span class="p">(){</span>  <span class="c1">//函数2</span>
      <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;执行了函数2&quot;</span><span class="p">);</span>
    <span class="p">}</span>
<span class="o">&lt;</span><span class="err">/script&gt;</span>

<span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;</span>
      <span class="nx">Fn</span><span class="p">();</span>  <span class="c1">//执行了声明式函数,在预编译期声明函数及被处理了，所以即使Fn()调用函数放在声明函数前也能执行。</span>
      <span class="kd">function</span> <span class="nx">Fn</span><span class="p">(){</span>
         <span class="c1">//声明式函数</span>
         <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;执行了声明式函数&quot;</span><span class="p">);</span>
      <span class="p">}</span>

      <span class="kd">var</span> <span class="nx">Fn</span> <span class="o">=</span> <span class="kd">function</span><span class="p">(){</span>
         <span class="c1">//赋值式函数</span>
         <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;执行了赋值式函数&quot;</span><span class="p">);</span>
      <span class="p">}</span>
<span class="o">&lt;</span><span class="err">/script&gt;</span></code></pre></div>


<p>js在预处理期对变量进行了声明处理,但是并没有进行初始化与赋值，所以导致代码块二中的变量是unfiened的</p>

<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="c1">//代码块一</span>
<span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;</span>
      <span class="nx">alert</span><span class="p">(</span><span class="nx">str</span><span class="p">);</span><span class="c1">//浏览器报错,但并没有弹出信息窗</span>
<span class="o">&lt;</span><span class="err">/script&gt;</span>

<span class="c1">//代码块二</span>
<span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;</span>
      <span class="nx">alert</span><span class="p">(</span><span class="nx">str</span><span class="p">);</span> <span class="c1">//弹窗&quot;undefined&quot;</span>
      <span class="kd">var</span> <span class="nx">str</span> <span class="o">=</span> <span class="s2">&quot;aaa&quot;</span><span class="p">;</span>
<span class="o">&lt;</span><span class="err">/script&gt;</span></code></pre></div>


<h3>执行顺序总结</h3>

<p>理解了上面的几个术语，相信大家对JS的运行机制已经有了个大概的印象了，现在我们来看个例子：</p>

<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;</span>
      <span class="nx">Fn</span><span class="p">();</span>  <span class="c1">//浏览器报错:&quot;undefined&quot;</span>
<span class="o">&lt;</span><span class="err">/script&gt;</span>

<span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;</span>
      <span class="kd">function</span> <span class="nx">Fn</span><span class="p">(){</span>
          <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;执行了函数1&quot;</span><span class="p">);</span>
      <span class="p">}</span>
<span class="o">&lt;</span><span class="err">/script&gt;</span></code></pre></div>


<p>为什么运行上面的代码浏览器会报错呢？声明函数不是会在预处理期就会被处理了吗，怎么还会找不到Fn()函数呢？其实这是一个理解误点，
我们上面说了JS引擎是按照代码块来顺序执行的，其实完整的说应该是按照代码块来进行预处理和执行的，也就是说预处理的只是执行到的代码块的声明函数和变量，而对于还未加载的代码块，是没法进行预处理的，这也是边编译边处理的核心所在。
现在，让我们来总结整理下：</p>

<ul>
<li><strong>Step 1</strong> ：读入第一个代码块；</li>
<li><strong>Step 2</strong> ：做语法分析，有错则报语法错误（比如括号不匹配等），并跳转到step5；</li>
<li><strong>Step 3</strong> ：对var变量和function定义做“预编译处理”（永远不会报错的，因为只解析正确的声明）；</li>
<li><strong>Step 4</strong> ：执行代码段，有错则报错（比如变量未定义）；</li>
<li><strong>Step 5</strong> ：如果还有下一个代码段，则读入下一个代码段，重复step2；</li>
<li><strong>Step 6</strong> ：结束；</li>
</ul>


<p>而根据HTML文档流的执行顺序，需要在页面元素渲染前执行的js代码应该放在<code>&lt;body&gt;</code>前面的<code>&lt;script&gt;</code>代码块中，而需要在页面元素加载完后的js放在</body>元素后面，body标签的onload事件是在最后执行的。</p>

<div class="highlight"><pre><code class="language-javascript" data-lang="javascript"><span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;</span>
    <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;first&quot;</span><span class="p">);</span>
    <span class="kd">function</span> <span class="nx">Fn</span><span class="p">(){</span>
        <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;third&quot;</span><span class="p">);</span>
    <span class="p">}</span>
<span class="o">&lt;</span><span class="err">/script&gt;</span>
<span class="o">&lt;</span><span class="nx">body</span> <span class="nx">onload</span><span class="o">=</span><span class="s2">&quot;Fn()&quot;</span><span class="o">&gt;</span>
    <span class="c1">//html content</span>
<span class="o">&lt;</span><span class="err">/body&gt;</span>
<span class="o">&lt;</span><span class="nx">script</span> <span class="nx">type</span><span class="o">=</span><span class="s2">&quot;text/javascript&quot;</span><span class="o">&gt;</span>
    <span class="nx">alert</span><span class="p">(</span><span class="s2">&quot;second&quot;</span><span class="p">);</span>
<span class="o">&lt;</span><span class="err">/script&gt;</span></code></pre></div>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GreenPlum脚本化安装]]></title>
    <link href="http://liyongxin.github.io/blog/2018/05/15/greenplumjiao-ben-hua-an-zhuang/"/>
    <updated>2018-05-15T20:02:51+08:00</updated>
    <id>http://liyongxin.github.io/blog/2018/05/15/greenplumjiao-ben-hua-an-zhuang</id>
    <content type="html"><![CDATA[<p>由于手动安装<code>Greenplum</code>过于繁琐，考虑对安装过程进行自动化，针对手动安装的过程，大致整理了几个脚本，简化安装程序，安装过程中必要的交互操作可以通过<code>expect</code>来实现，比如多机互信环节、<code>master</code>安装<code>GreenPlum</code>过程等。
大致过程如下：</p>

<h2>准备脚本</h2>

<p><code>root</code>用户登录<code>master</code>节点，创建<code>/opt/gp</code>目录</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">mkdir /opt/gp</code></pre></div>


<p>拷贝<code>gp.tar</code>到<code>/opt/gp</code>目录，解压</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">tar -xvf gp.tar -C /opt/gp
chmod -R <span class="m">777</span> /opt/gp</code></pre></div>


<h2>master安装GP</h2>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">cd</span> /opt/gp
./greenplum-db-4.3.0.0-build-3-RHEL5-x86_64.bin</code></pre></div>


<h2>关闭相关服务，执行脚本拷贝</h2>

<h4>配置hosts文件,内容参照如下</h4>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="mi">10</span><span class="o">.</span><span class="mi">68</span><span class="o">.</span><span class="mi">28</span><span class="o">.</span><span class="mi">222</span> <span class="n">mdw</span>
<span class="mi">10</span><span class="o">.</span><span class="mi">68</span><span class="o">.</span><span class="mi">28</span><span class="o">.</span><span class="mi">223</span> <span class="n">smdw</span>
<span class="mi">10</span><span class="o">.</span><span class="mi">68</span><span class="o">.</span><span class="mi">28</span><span class="o">.</span><span class="mi">224</span> <span class="n">sdw1</span>
<span class="mi">10</span><span class="o">.</span><span class="mi">68</span><span class="o">.</span><span class="mi">28</span><span class="o">.</span><span class="mi">225</span> <span class="n">sdw2</span></code></pre></div>




<!--more-->


<h4>执行脚本pre_c.sh</h4>

<p>需输入机器密码，进行各节点修改hosts、建目录、关防火墙、selinux等操作</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c">#!/bin/sh</span>
cat ./all_hosts <span class="p">|</span> <span class="k">while</span> <span class="nb">read </span>line
<span class="k">do</span>
   <span class="nv">ip</span><span class="o">=</span><span class="k">${</span><span class="nv">line</span><span class="p">% *</span><span class="k">}</span>
   <span class="nv">hostname</span><span class="o">=</span><span class="k">${</span><span class="nv">line</span><span class="p">#* </span><span class="k">}</span>
   <span class="nv">hosts</span><span class="o">=</span><span class="sb">`</span>cat ./all_hosts<span class="sb">`</span>
   <span class="nv">sshfile</span><span class="o">=</span>/etc/ssh/sshd_config
   ssh root@<span class="nv">$ip</span> &lt;&lt;-!!!
<span class="nb">echo</span> <span class="s2">&quot;$hosts&quot;</span><span class="p">|</span>sed -i <span class="s1">&#39;/^M//g&#39;</span> &gt;&gt; /etc/hosts
sed -i <span class="s1">&#39;s/SELINUX=enforcing/SELINUX=disabled/&#39;</span> /etc/selinux/config
setenforce 0
service iptables save
service iptables stop
chkconfig iptables off
service ip6tables save
service ip6tables stop
chkconfig ip6tables off
<span class="c">#/etc/ssh/sshd_config</span>
sed -i <span class="s1">&#39;s/^#PermitRootLogin.*/PermitRootLogin yes/&#39;</span> <span class="nv">$sshfile</span>
sed -i <span class="s1">&#39;s/^#RSAAuthentication.*/RSAAuthentication yes/&#39;</span> <span class="nv">$sshfile</span>
sed -i <span class="s1">&#39;s/^#PubkeyAuthentication.*/PubkeyAuthentication yes/&#39;</span> <span class="nv">$sshfile</span>
sed -i <span class="s1">&#39;s/^#AuthorizedKeysFile.*/AuthorizedKeysFile .ssh\/authorized_keys/&#39;</span> <span class="nv">$sshfile</span>
<span class="k">if</span> <span class="o">[</span> ! -d /opt/gp <span class="o">]</span><span class="p">;</span><span class="k">then</span>
   mkdir -p /opt/gp
   chmod <span class="m">777</span> /opt/gp
<span class="k">fi</span>
<span class="nb">exit</span>
!!!
<span class="k">done</span></code></pre></div>


<h2>为root用户建立互信并添加必要的用户和组</h2>

<h4>配置all_hosts文件，内容参照如下：</h4>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">mdw
smdw
sdw1
sdw2</code></pre></div>


<h4>执行rtrust_adduser.sh,需输入一次机器密码</h4>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c">#!/bin/sh</span>
<span class="nb">source</span> /usr/local/greenplum-db/greenplum_path.sh
chmod <span class="m">777</span> /opt/gp/all_hosts
gpssh-exkeys -f /opt/gp/all_hosts
<span class="c">#./addUser.sh</span>
gpssh -f ./all_hosts <span class="s1">&#39;groupadd -g 3030 gpadmin;groupadd -g 3040 gpmon;useradd -u 3030 -g gpadmin -m -s /bin/bash gpadmin;useradd -u 3040 -g gpmon -m -s /bin/bash gpmon;echo gpadmin | passwd gpadmin --stdin;echo gpmon | passwd gpmon --stdin;chown -R gpadmin:gpadmin /data;chown -R gpadmin:gpadmin /gpdata1;chown -R gpadmin:gpadmin /gpdata2;chown -R gpadmin:gpadmin /gpdata3;chown -R gpadmin:gpadmin /gpdata4;chown -R gpadmin:gpadmin /gpdata5;chown -R gpadmin:gpadmin /gpdata6;chown -R gpadmin:gpadmin /gpdata7;chown -R gpadmin:gpadmin /gpdata8;&#39;</span></code></pre></div>


<h2>各节点安装必要的软件包，拷贝相关的脚本</h2>

<h4>配置所有segment节点配置文件all_segs,参照如下</h4>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">sdw1
sdw2</code></pre></div>


<h4>配置standby节点配置文件standby，若不安装smdw，无需配置，参照如下</h4>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">smdw</code></pre></div>


<h4>执行cprpm.sh，若环境没法连接外网，需手动搭建本地源服务器，并传递参数本地源服务器ip地址，若可连外网，无需传参</h4>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c">#!/bin/bash</span>
<span class="nv">localyum_ip</span><span class="o">=</span><span class="nv">$1</span>
<span class="nb">echo</span> <span class="nv">$localyum_ip</span>
<span class="k">if</span> <span class="o">[[</span> <span class="nv">$localyum_ip</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span> <span class="o">]]</span><span class="p">;</span><span class="k">then</span>
    <span class="nb">echo</span> <span class="s2">&quot;Did not set up local yum repository,rpms will be downloaded from Internet&quot;</span>
    yum -y install gcc openssh-clients unzip zip OpenIPMI ipmitool xfsprogs kmod-xfs ntp
    <span class="nb">source</span> /usr/local/greenplum-db/greenplum_path.sh
    gpssh -f ./all_hosts yum -y install gcc openssh-clients unzip zip OpenIPMI ipmitool xfsprogs kmod-xfs ntp
    <span class="c"># exit 0</span>
<span class="k">fi</span>

<span class="k">if</span> <span class="o">[</span> ! -f <span class="s2">&quot;./all_hosts&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
    <span class="nb">echo</span> <span class="s2">&quot;Error:could not find file all_hosts!!!&quot;</span>
    <span class="nb">exit </span>1
<span class="k">fi</span>

<span class="k">if</span> <span class="o">[</span> ! -f <span class="s2">&quot;./gpinstall_inspur.tar&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
    <span class="nb">echo</span> <span class="s2">&quot;Error:could not find file gpinstall_inspur.tar!!!&quot;</span>
    <span class="nb">exit </span>1
<span class="k">fi</span>
<span class="k">if</span> <span class="o">[[</span> <span class="nv">$localyum_ip</span> !<span class="o">=</span> <span class="s2">&quot;&quot;</span> <span class="o">]]</span><span class="p">;</span><span class="k">then</span>
    <span class="c">#yum -y install gcc openssh-clients unzip zip OpenIPMI ipmitool xfsprogs kmod-xfs ntp</span>
    <span class="k">if</span> <span class="o">[</span> ! -d <span class="s2">&quot;/etc/yum.repos.d_backup&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
        mkdir /etc/yum.repos.d_backup
    <span class="k">fi</span>
    mv /etc/yum.repos.d/*.repo /etc/yum.repos.d_backup
    touch /etc/yum.repos.d/localyum.repo
    cat &gt; /etc/yum.repos.d/localyum.repo <span class="s">&lt;&lt;EOF</span>
<span class="s">        [localyum]</span>
<span class="s">        name=localyum</span>
<span class="s">        baseurl=http://ipforlocalyumrepo/Packages</span>
<span class="s">        enabled=1</span>
<span class="s">        gpgcheck=0</span>
<span class="s">    EOF</span>
    sed -i /baseurl/d /etc/yum.repos.d/localyum.repo
    <span class="nb">echo</span> <span class="s2">&quot;baseurl=http://${localyum_ip}/Packages&quot;</span> &gt;&gt;/etc/yum.repos.d/localyum.repo
    yum makecache
    yum -y update
<span class="k">fi</span>
<span class="nb">source</span> /usr/local/greenplum-db/greenplum_path.sh
gpscp -f ./all_hosts ./gpinstall_inspur.tar <span class="o">=</span>:/opt/gp

gpssh -f ./all_hosts <span class="s1">&#39;tar -xvf /opt/gp/gpinstall_inspur.tar -C /opt/gp;chmod -R 777 /opt/gp;rpm -ivh /opt/gp/ed-1.1-3.3.el6.x86_64.rpm&#39;</span>
<span class="c">#rpm -ivh /opt/gp/ed-1.1-3.3.el6.x86_64.rpm</span>
<span class="k">if</span> <span class="o">[[</span> <span class="nv">$localyum_ip</span> !<span class="o">=</span> <span class="s2">&quot;&quot;</span> <span class="o">]]</span><span class="p">;</span><span class="k">then</span>
    <span class="c">#master node download using local yum repository</span>
    <span class="c">#./install-uselocalyum.sh $localyum_ip</span>
    <span class="c">#source /usr/local/greenplum-db/greenplum_path.sh</span>
    <span class="c">#segment nodes download using local yum repository</span>
    gpssh -f ./all_segs /opt/gp/install-uselocalyum.sh <span class="nv">$localyum_ip</span>
    <span class="c">#if having standby node,download rpms for it</span>
    <span class="k">if</span> <span class="o">[</span> -f ./standby <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
       gpssh -f ./standby /opt/gp/install-uselocalyum.sh <span class="nv">$localyum_ip</span>
    <span class="k">fi</span>
<span class="k">fi</span></code></pre></div>


<h2>执行osconfig_batch.sh,进行操作系统参数优化</h2>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">source</span> /usr/local/greenplum-db/greenplum_path.sh
gpssh -f ./all_hosts /opt/gp/os.sh</code></pre></div>


<p>os.sh内容如下：</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c">#!/bin/bash</span>
<span class="nv">gpfiledir</span><span class="o">=</span>/opt/gp
<span class="nv">bakdir</span><span class="o">=</span><span class="nv">$gpfiledir</span>/backup
<span class="nv">hosts</span><span class="o">=</span>/etc/hosts
<span class="nv">sourcedir</span><span class="o">=</span>/opt/gp
<span class="nv">ipaddr</span><span class="o">=</span><span class="k">$(</span><span class="nb">echo</span> <span class="sb">`</span>hostname -I<span class="sb">`</span><span class="k">)</span>
<span class="nb">echo</span> <span class="nv">$ipaddr</span>
<span class="c">#exit 0</span>
cat <span class="nv">$hosts</span> <span class="p">|</span> <span class="k">while</span> <span class="nb">read </span>line
<span class="k">do</span>
   <span class="nv">ip</span><span class="o">=</span><span class="k">${</span><span class="nv">line</span><span class="p">% *</span><span class="k">}</span>
   <span class="nv">hostname</span><span class="o">=</span><span class="k">${</span><span class="nv">line</span><span class="p">#* </span><span class="k">}</span>
   <span class="nb">echo</span> <span class="nv">$ip$hostname</span> &gt;&gt; ip.out
   <span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$ipaddr&quot;</span> <span class="o">=</span> <span class="s2">&quot;$ip&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
      <span class="nb">echo</span> <span class="s2">&quot;开始修改$hostname机器的配置&quot;</span>
      hostname <span class="nv">$hostname</span>
      sed -i <span class="s1">&#39;s/^HOSTNAME=.*/HOSTNAME=&#39;</span><span class="s2">&quot;$hostname&quot;</span><span class="s1">&#39;/&#39;</span> /etc/sysconfig/network
      <span class="nb">break</span>
<span class="nb">   </span><span class="k">fi</span>
<span class="k">done</span>
<span class="c">#backup configs</span>
<span class="k">if</span> <span class="o">[</span> ! -d <span class="s2">&quot;$bakdir&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
   mkdir -p <span class="nv">$bakdir</span>
   chmod <span class="m">777</span> <span class="nv">$bakdir</span>
<span class="k">fi</span>

cp /etc/security/limits.conf <span class="nv">$bakdir</span>
cp /etc/security/limits.d/90-nproc.conf <span class="nv">$bakdir</span>
cp /etc/rc.d/rc.local <span class="nv">$bakdir</span>
cp /boot/grub/grub.conf <span class="nv">$bakdir</span>
cp /etc/inittab <span class="nv">$bakdir</span>
cp /etc/sysctl.conf <span class="nv">$bakdir</span>

<span class="c">#/etc/limits/limits.conf</span>
cat <span class="s">&lt;&lt; EOF &gt;&gt; /etc/security/limits.conf</span>
<span class="s">* soft nofile 65536</span>
<span class="s">* hard nofile 65536</span>
<span class="s">* soft nproc 131072</span>
<span class="s">* hard nproc 131072</span>
<span class="s">EOF</span>

<span class="c">#/etc/limits/limits.d/90-nproc.conf</span>
cat <span class="s">&lt;&lt; EOF &gt;&gt; /etc/security/limits.d/90-nproc.conf</span>
<span class="s">* soft nproc 131072</span>
<span class="s">* hard nproc 131072</span>
<span class="s">EOF</span>
<span class="c">#/etc/rc.d/rc.local</span>
<span class="nb">echo</span> <span class="s2">&quot;blockdev --setra 16384 /dev/sd*&quot;</span> &gt;&gt; /etc/rc.d/rc.local
<span class="c">#/4.4.4/boot/grub/grub.conf</span>
<span class="nb">echo</span> <span class="s2">&quot;elevator=deadline transparent_hugepage=never&quot;</span> &gt;&gt; /boot/grub/grub.conf
<span class="c">#/etc/inittab</span>
sed -i <span class="s1">&#39;s/^id:*:initdefault:/id:3:initdefault:/&#39;</span> /etc/inittab
<span class="c">#/etc/sysctl.conf</span>
cat <span class="s">&lt;&lt; EOF &gt; /etc/sysctl.conf</span>
<span class="s">net.bridge.bridge-nf-call-ip6tables = 0</span>
<span class="s">net.bridge.bridge-nf-call-iptables = 0</span>
<span class="s">net.bridge.bridge-nf-call-arptables = 0</span>
<span class="s">kernel.shmmax = 500000000</span>
<span class="s">kernel.shmmni = 4096</span>
<span class="s">kernel.shmall = 4000000000</span>
<span class="s">kernel.sem = 250 512000 100 2048</span>
<span class="s">kernel.sysrq = 1</span>
<span class="s">kernel.core_uses_pid = 1</span>
<span class="s">kernel.msgmnb = 65536</span>
<span class="s">kernel.msgmax = 65536</span>
<span class="s">net.ipv4.tcp_syncookies = 1</span>
<span class="s">net.ipv4.ip_forward = 0</span>
<span class="s">net.ipv4.conf.default.accept_source_route = 0</span>
<span class="s">net.ipv4.tcp_tw_recycle = 1</span>
<span class="s">net.ipv4.tcp_max_syn_backlog = 4096</span>
<span class="s">net.ipv4.conf.all.arp_filter = 1</span>
<span class="s">net.ipv4.conf.default.arp_filter = 1</span>
<span class="s">net.core.netdev_max_backlog = 10000</span>
<span class="s">vm.overcommit_memory = 2</span>
<span class="s">kernel.msgmni = 2048</span>
<span class="s">net.ipv4.ip_local_port_range = 1025 65535</span>
<span class="s">EOF</span></code></pre></div>


<h2>重启各节点</h2>

<h2>建立数据目录，进行磁盘挂载，逻辑卷需手动创建</h2>

<h4>配置segment数据目录逻辑卷lvm,参照如下</h4>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">/dev/sdb1
/dev/sdb2</code></pre></div>


<h4>配置master和standby数据目录逻辑卷lvm-master-standby，参照如下</h4>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">master :/dev/sdb1
standby :/dev/sdb1</code></pre></div>


<h4>执行all_nodes_mount_batch.sh</h4>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c">#!/bin/sh</span>
<span class="c">#config volum for all segment nodes</span>
<span class="c">#gpssh -f ./all_segs /opt/gp/read.sh</span>
<span class="c">#prepare to config master&#39;s volume</span>
<span class="nv">dir1</span><span class="o">=</span>/data
<span class="nv">dir2</span><span class="o">=</span>/data/master
<span class="nv">fstab</span><span class="o">=</span>/etc/fstab
<span class="nv">lvmconfig_ms</span><span class="o">=</span><span class="nv">$1</span>
<span class="nv">lvmconfig_segs</span><span class="o">=</span><span class="nv">$2</span>
<span class="nv">dirPath</span><span class="o">=</span><span class="k">$(</span><span class="nb">cd</span> <span class="s2">&quot;$(dirname &quot;</span><span class="nv">$0</span><span class="s2">&quot;)&quot;</span><span class="p">;</span> <span class="nb">pwd</span><span class="k">)</span>
<span class="k">if</span> <span class="o">[</span> ! -f <span class="s2">&quot;$lvmconfig_ms&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
   <span class="nv">lvmconfig_ms</span><span class="o">=</span><span class="nv">$dirPath</span>/lvm-master-standby
   <span class="k">if</span> <span class="o">[</span> ! -f <span class="s2">&quot;$lvmconfig_ms&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
     <span class="nb">echo</span> <span class="s2">&quot;Config file does not exist!&quot;</span>
     <span class="nb">exit </span>0
   <span class="k">fi</span>
<span class="k">fi</span>
<span class="k">if</span> <span class="o">[</span> ! -f <span class="s2">&quot;$lvmconfig_seg&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
   <span class="nv">lvmconfig_seg</span><span class="o">=</span><span class="nv">$dirPath</span>/lvm
   <span class="k">if</span> <span class="o">[</span> ! -f <span class="s2">&quot;$lvmconfig_seg&quot;</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
     <span class="nb">echo</span> <span class="s2">&quot;配置文件不存在&quot;</span>
     <span class="nb">exit </span>0
   <span class="k">fi</span>
<span class="k">fi</span>

<span class="k">function</span> isMounted<span class="o">(){</span>
     <span class="nv">res</span><span class="o">=</span>0
     <span class="nv">mountstr</span><span class="o">=</span><span class="k">$(</span>mount <span class="p">|</span> grep <span class="nv">$1</span><span class="k">)</span>
     <span class="c">#echo $mountstr &gt; isout.log</span>
     <span class="nv">constr</span><span class="o">=</span><span class="k">$(</span><span class="nb">echo</span> <span class="s2">&quot;$mountstr&quot;</span> <span class="p">|</span>grep <span class="nv">$1</span><span class="k">)</span>
     <span class="c"># echo $constr &gt;&gt; isout.log</span>
     <span class="k">if</span> <span class="o">[[</span> <span class="nv">$constr</span> !<span class="o">=</span> <span class="s2">&quot;&quot;</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
       <span class="nv">res</span><span class="o">=</span>1
     <span class="k">fi</span>
     <span class="nb">echo</span> <span class="nv">$res</span>
<span class="o">}</span>
<span class="c">#begin to config master&#39;s volume</span>
<span class="nv">master_str</span><span class="o">=</span><span class="sb">`</span>cat <span class="nv">$lvmconfig_ms</span> <span class="p">|</span> grep master<span class="sb">`</span>
<span class="nb">echo</span> <span class="nv">$master_str</span>
<span class="nv">master_device</span><span class="o">=</span><span class="k">${</span><span class="nv">master_str</span><span class="p">#*:</span><span class="k">}</span>
<span class="nb">echo</span> <span class="s2">&quot;Device name of master: &quot;</span><span class="nv">$master_device</span>
<span class="k">if</span> <span class="o">[[</span> <span class="nv">$master_device</span> <span class="o">==</span> <span class="s2">&quot;&quot;</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
    <span class="nb">exit </span>1
<span class="k">fi</span>
<span class="nv">res</span><span class="o">=</span><span class="k">$(</span>isMounted <span class="nv">$master_device</span><span class="k">)</span>
<span class="nb">echo</span> <span class="nv">$res</span>
<span class="k">if</span> <span class="o">[[</span> <span class="nv">$res</span> <span class="o">==</span> <span class="m">1</span> <span class="o">]]</span><span class="p">;</span> <span class="k">then</span>
    umount <span class="nv">$master_device</span>
<span class="k">fi</span>
mkfs.xfs -f <span class="nv">$master_device</span>
<span class="k">if</span> <span class="o">[</span> -d <span class="nv">$dir1</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
    rm -rf <span class="nv">$dir1</span>
<span class="k">fi</span>
mkdir <span class="nv">$dir1</span>
<span class="k">if</span> <span class="o">[</span> -d <span class="nv">$dir2</span> <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
    rm -rf <span class="nv">$dir2</span>
<span class="k">fi</span>
<span class="c">#mkdir $dir2</span>
<span class="nv">fstabstr</span><span class="o">=</span><span class="k">${</span><span class="nv">master_device</span><span class="k">}</span><span class="s2">&quot; &quot;</span><span class="k">${</span><span class="nv">dir1</span><span class="k">}</span><span class="s2">&quot; xfs rw,noatime,inode64,allocsize=16m 1 1&quot;</span>
<span class="nb">echo</span> <span class="nv">$fstabstr</span>
mount <span class="nv">$master_device</span> <span class="nv">$dir1</span> <span class="o">&amp;&amp;</span> <span class="o">(</span>grep -q <span class="s2">&quot;$fstabstr&quot;</span> <span class="nv">$fstab</span> <span class="o">||</span> <span class="nb">echo</span> <span class="s2">&quot;$fstabstr&quot;</span> &gt;&gt; <span class="nv">$fstab</span><span class="o">)</span>
chmod -R <span class="m">777</span> <span class="nv">$dir1</span>
mkdir -p <span class="nv">$dir2</span>

<span class="c">#segments</span>
<span class="nb">source</span> /usr/local/greenplum-db/greenplum_path.sh
gpscp -f ./all_segs <span class="nv">$dirPath</span>/lvm <span class="o">=</span>:/opt/gp
gpssh -f ./all_segs <span class="nv">$dirPath</span>/read.sh <span class="nv">$dirPath</span>/lvm
<span class="c">#if having standby node,config its volume</span>
<span class="k">if</span> <span class="o">[</span> -f ./standby <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
     <span class="nb">echo</span> <span class="s2">&quot;standby config file exists&quot;</span>
     gpscp -f ./standby <span class="nv">$lvmconfig_ms</span> <span class="o">=</span>:/opt/gp
     cat ./standby <span class="p">|</span> <span class="k">while</span> <span class="nb">read </span>line
     <span class="k">do</span>
     gpssh -f ./standby <span class="nv">$dirPath</span>/standby_mount.sh <span class="nv">$lvmconfig_ms</span>
     <span class="k">done</span>
<span class="k">fi</span></code></pre></div>


<h2>执行bashrx.sh，修改bashrc文件</h2>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c">#!/bin/sh</span>
<span class="c">#edit bashrc on master node</span>
<span class="nb">source</span> /usr/local/greenplum-db/greenplum_path.sh
cat <span class="s">&lt;&lt; EOF &gt;&gt; /root/.bashrc</span>
<span class="s">source /usr/local/greenplum-db/greenplum_path.sh</span>
<span class="s">EOF</span>
cat <span class="s">&lt;&lt; EOF &gt;&gt; /home/gpadmin/.bashrc</span>
<span class="s">    source /usr/local/greenplum-db/greenplum_path.sh</span>
<span class="s">    MASTER_DATA_DIRECTORY=/data/master/gpseg-1</span>
<span class="s">    export MASTER_DATA_DIRECTORY</span>
<span class="s">EOF</span>
<span class="c">#edit bashrc on all segments</span>
gpssh -f ./all_segs /opt/gp/segs_modify_bashrc.sh
<span class="c">#if having standby node,modify its bashrc</span>
<span class="k">if</span> <span class="o">[</span> -f ./standby <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
   gpssh -f ./standby /opt/gp/stb_modify_bashrc.sh
   <span class="nb">echo</span> <span class="s2">&quot;exist standby node&quot;</span>
<span class="k">fi</span></code></pre></div>


<h2>执行gtrust_seginstall.sh，gpadmin用户互信及其他机器安装GP，需输入密码gpadmin</h2>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">source</span> /usr/local/greenplum-db/greenplum_path.sh
chmod <span class="m">777</span> /opt/gp/all_hosts
su - gpadmin -c <span class="s2">&quot;gpssh-exkeys -f /opt/gp/all_hosts&quot;</span>
chmod <span class="m">777</span> /usr/local
gpseginstall -f all_segs -p gpadmin
<span class="k">if</span> <span class="o">[</span> -f ./standby <span class="o">]</span><span class="p">;</span><span class="k">then</span>
    gpseginstall -f ./standby -p gpadmin
<span class="k">fi</span>
cp <span class="nv">$GPHOME</span>/docs/cli_help/gpconfigs/gpinitsystem_config /opt/gp</code></pre></div>


<h2>配置ntp时钟同步，执行ntpsyc_start.sh</h2>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c">#!/bin/sh</span>
<span class="c">#this scrip accepts two parameters,the first is ip of external ntp_server,the second one which is optional is the hostname of master node</span>
<span class="c">#external ntp_server ip</span>
<span class="nv">ntp_server</span><span class="o">=</span><span class="nv">$1</span>
<span class="c">#configure master node</span>
<span class="nb">source</span> /usr/local/greenplum-db/greenplum_path.sh
<span class="nb">echo</span> <span class="s2">&quot;server $ntp_server&quot;</span> &gt;&gt; /etc/ntp.conf
<span class="nb">echo</span> <span class="s2">&quot;server 127.127.1.0&quot;</span> &gt;&gt; /etc/ntp.conf
<span class="nb">echo</span> <span class="s2">&quot;fudge 127.127.1.0 stratum 8&quot;</span> &gt;&gt; /etc/ntp.conf
service ntpd restart
chkconfig ntpd on
<span class="c">#configure all segments</span>
<span class="c">#hostname of master node</span>
<span class="nv">master</span><span class="o">=</span><span class="nv">$2</span>
<span class="k">if</span> <span class="o">[[</span> <span class="nv">$master</span> <span class="o">=</span> <span class="s2">&quot;&quot;</span> <span class="o">]]</span><span class="p">;</span><span class="k">then</span>
    <span class="nv">master</span><span class="o">=</span><span class="s2">&quot;mdw&quot;</span>
<span class="k">fi</span>
<span class="nb">echo</span> <span class="s2">&quot;master name is:$master&quot;</span>
<span class="c">#configure segment node</span>
gpssh -f ./all_segs /opt/gp/ntpsyc_segs.sh <span class="nv">$master</span>

<span class="k">if</span> <span class="o">[</span> -f ./standby <span class="o">]</span><span class="p">;</span> <span class="k">then</span>
    cat ./standby <span class="p">|</span> <span class="k">while</span> <span class="nb">read </span>line
    <span class="k">do</span>
    <span class="c">#gpssh -f ./standby echo &quot;server $master prefer&quot; &gt;&gt; /etc/ntp.conf</span>
    <span class="c">#gpssh -f ./standby echo &quot;server $ntp_server&quot; &gt;&gt; /etc/ntp.conf</span>
    gpssh -f ./standby /opt/gp/ntpsyc_config_standby.sh <span class="nv">$master</span> <span class="nv">$ntp_server</span>
    gpssh -f ./all_segs /opt/gp/ntpsyc_segs_with_standby.sh <span class="nv">$line</span>
    <span class="c">#gpssh -f ./all_segs echo &quot;server $line&quot; &gt;&gt; /etc/ntp.conf</span>
    <span class="c">#gpssh -f ./standby sed -i &quot;a\server $master prefer&quot; /etc/ntp.conf</span>
    <span class="c">#gpssh -f ./standby sed -i &quot;a\server $ntp_server&quot; /etc/ntp.conf</span>
    <span class="c">#gpssh -f ./all_segs sed -i &quot;a\server $line&quot; /etc/ntp.conf</span>
    <span class="k">done</span>
    <span class="c">#gpssh -f ./standby service ntpd restart</span>
    <span class="c">#gpssh -f ./standby chkconfig ntpd on</span>
    <span class="c">#gpssh -f ./all_segs service ntpd restart</span>
    <span class="c">#gpssh -f ./all_segs chkconfig ntpd on</span>
<span class="k">fi</span></code></pre></div>


<h2>修改配置文件进行初始化</h2>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">gpinitsystem -c gpinitsystem_config -s smdw <span class="c">#若无standby，无需添加-s smdw</span></code></pre></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[GreenPlum安装]]></title>
    <link href="http://liyongxin.github.io/blog/2018/05/14/greenpluman-zhuang/"/>
    <updated>2018-05-14T20:24:55+08:00</updated>
    <id>http://liyongxin.github.io/blog/2018/05/14/greenpluman-zhuang</id>
    <content type="html"><![CDATA[<p>GP的部署相对来讲是比较麻烦的，主要是为了最大化的利益系统资源，需要对数据盘、系统参数、机器互信等方面进行调整，大致过程如下：</p>

<h3>安装前准备</h3>

<h4>网络规划</h4>

<p>Greenplum数据库系统常见的拓扑图如上图所示，由Master主机和Segment主机组成。Master主机和Segment主机之间会组成一个内部网络（LAN）。
为了充分发挥Greenplum数据库并行处理的性能，对网络带宽要求较高。服务器会配置多个网卡，内部网需要配置多个网段的IP。需要对外连接的服务器需配置外部IP。
建议在Greenplum数据库系统安装之前，把网络配置规划好。
<img src="http://liyongxin.github.io/images/network.png" alt="" /></p>

<h4>存储空间规划</h4>

<p>首先，需要评估目标数据库数据所需要的空间容量。建议了解客户搭建Greenplum数据库的具体应用。举例：估计数据库所需空间为U，数据库需要启用Mirror，磁盘阵列总可用空间为D（Raid之后）。空间规划服务和如下公式：
<code>2 * U + U / 3 = D * 70%</code>
磁盘空间D平均分配到各个Segment服务器上。
Master需要相应的空间。使用服务器内置硬盘的计算方式类似。</p>

<h4>数据库实例规划</h4>

<p>规划每个Segment服务器上建立的数据库实例的数量（instance数量），通常建议每2个CPU内核（core）对应一个数据库实例。
如 ：<code>2*4</code>核CPU的服务器，可配置4个实例。</p>

<!--more-->


<h3>操作系统规划</h3>

<h4>修改主机名</h4>

<p>修改各台主机的主机名称。一般建议的命名规则如下：</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="ss">Master</span><span class="p">:</span> <span class="n">mdw</span>
<span class="no">Standby</span> <span class="ss">Master</span><span class="p">:</span> <span class="n">smdw</span>
<span class="no">Segment</span> <span class="ss">Host</span><span class="p">:</span> <span class="n">sdw1</span> <span class="n">sdw2</span> <span class="o">.</span><span class="n">.</span><span class="o">.</span><span class="n">sdwn</span></code></pre></div>


<p>修改hostname:</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">hostnamectl <span class="nb">set</span>-hostname mdw</code></pre></div>


<p>2、修改<code>/etc/hosts</code>文件</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="mi">21</span><span class="o">.</span><span class="mi">104</span><span class="o">.</span><span class="mi">138</span><span class="o">.</span><span class="mi">21</span>   <span class="n">mdw</span><span class="o">-</span><span class="n">ext1</span>
<span class="mi">192</span><span class="o">.</span><span class="mi">168</span><span class="o">.</span><span class="mi">1</span><span class="o">.</span><span class="mi">254</span>   <span class="n">mdw</span><span class="o">-</span><span class="mi">1</span> <span class="n">mdw</span>
<span class="mi">192</span><span class="o">.</span><span class="mi">168</span><span class="o">.</span><span class="mi">2</span><span class="o">.</span><span class="mi">254</span>   <span class="n">mdw</span><span class="o">-</span><span class="mi">2</span>
<span class="mi">192</span><span class="o">.</span><span class="mi">168</span><span class="o">.</span><span class="mi">3</span><span class="o">.</span><span class="mi">254</span>   <span class="n">mdw</span><span class="o">-</span><span class="mi">3</span>
<span class="mi">192</span><span class="o">.</span><span class="mi">168</span><span class="o">.</span><span class="mi">4</span><span class="o">.</span><span class="mi">254</span>   <span class="n">mdw</span><span class="o">-</span><span class="mi">4</span>
<span class="mi">192</span><span class="o">.</span><span class="mi">168</span><span class="o">.</span><span class="mi">5</span><span class="o">.</span><span class="mi">254</span>   <span class="n">mdw</span><span class="o">-</span><span class="mi">5</span>
<span class="mi">192</span><span class="o">.</span><span class="mi">168</span><span class="o">.</span><span class="mi">6</span><span class="o">.</span><span class="mi">254</span>   <span class="n">mdw</span><span class="o">-</span><span class="mi">6</span></code></pre></div>


<h4>关闭相关服务</h4>

<div class="highlight"><pre><code class="language-sql" data-lang="sql"><span class="n">service</span> <span class="n">iptables</span> <span class="n">save</span>
<span class="n">service</span> <span class="n">iptables</span> <span class="n">stop</span>
<span class="n">chkconfig</span> <span class="n">iptables</span> <span class="k">off</span>
<span class="n">service</span> <span class="n">ip6tables</span> <span class="n">save</span>
<span class="n">service</span> <span class="n">ip6tables</span> <span class="n">stop</span>
<span class="n">chkconfig</span> <span class="n">ip6tables</span> <span class="k">off</span></code></pre></div>


<h4>修改系统参数</h4>

<p>编辑系统文件<code>/etc/sysctl.conf</code>,Sysctl是一个允许您改变正在运行中的Linux系统的接口。它包含一些 TCP/IP 堆栈和虚拟内存系统的高级选项</p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">kernel</span><span class="o">.</span><span class="n">shmmax</span> <span class="o">=</span> <span class="mi">500000000</span>
<span class="n">kernel</span><span class="o">.</span><span class="n">shmmni</span> <span class="o">=</span> <span class="mi">4096</span>
<span class="n">kernel</span><span class="o">.</span><span class="n">shmall</span> <span class="o">=</span> <span class="mi">4000000000</span>
<span class="n">kernel</span><span class="o">.</span><span class="n">sem</span> <span class="o">=</span> <span class="mi">250</span> <span class="mi">512000</span> <span class="mi">100</span> <span class="mi">2048</span>
<span class="n">kernel</span><span class="o">.</span><span class="n">sysrq</span> <span class="o">=</span> <span class="mi">1</span>
<span class="n">kernel</span><span class="o">.</span><span class="n">core_uses_pid</span> <span class="o">=</span> <span class="mi">1</span>
<span class="n">kernel</span><span class="o">.</span><span class="n">msgmnb</span> <span class="o">=</span> <span class="mi">65536</span>
<span class="n">kernel</span><span class="o">.</span><span class="n">msgmax</span> <span class="o">=</span> <span class="mi">65536</span>
<span class="n">net</span><span class="o">.</span><span class="n">ipv4</span><span class="o">.</span><span class="n">tcp_syncookies</span> <span class="o">=</span> <span class="mi">1</span>
<span class="n">net</span><span class="o">.</span><span class="n">ipv4</span><span class="o">.</span><span class="n">ip_forward</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">net</span><span class="o">.</span><span class="n">ipv4</span><span class="o">.</span><span class="n">conf</span><span class="o">.</span><span class="n">default</span><span class="o">.</span><span class="n">accept_source_route</span> <span class="o">=</span> <span class="mi">0</span>
<span class="n">net</span><span class="o">.</span><span class="n">ipv4</span><span class="o">.</span><span class="n">tcp_tw_recycle</span> <span class="o">=</span> <span class="mi">1</span>
<span class="n">net</span><span class="o">.</span><span class="n">ipv4</span><span class="o">.</span><span class="n">tcp_max_syn_backlog</span> <span class="o">=</span> <span class="mi">4096</span>
<span class="n">net</span><span class="o">.</span><span class="n">ipv4</span><span class="o">.</span><span class="n">conf</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">arp_filter</span> <span class="o">=</span> <span class="mi">1</span>
<span class="n">net</span><span class="o">.</span><span class="n">ipv4</span><span class="o">.</span><span class="n">conf</span><span class="o">.</span><span class="n">default</span><span class="o">.</span><span class="n">arp_filter</span> <span class="o">=</span> <span class="mi">1</span>
<span class="n">net</span><span class="o">.</span><span class="n">core</span><span class="o">.</span><span class="n">netdev_max_backlog</span> <span class="o">=</span> <span class="mi">10000</span>
<span class="n">vm</span><span class="o">.</span><span class="n">overcommit_memory</span> <span class="o">=</span> <span class="mi">2</span>
<span class="n">kernel</span><span class="o">.</span><span class="n">msgmni</span> <span class="o">=</span> <span class="mi">2048</span>
<span class="n">net</span><span class="o">.</span><span class="n">ipv4</span><span class="o">.</span><span class="n">ip_local_port_range</span> <span class="o">=</span> <span class="mi">1025</span> <span class="mi">65535</span></code></pre></div>


<p>编辑系统文件<code>/etc/security/limits.conf</code></p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="o">*</span> <span class="n">soft</span> <span class="n">nofile</span> <span class="mi">65536</span>
<span class="o">*</span> <span class="n">hard</span> <span class="n">nofile</span> <span class="mi">65536</span>
<span class="o">*</span> <span class="n">soft</span> <span class="n">nproc</span> <span class="mi">131072</span>
<span class="o">*</span> <span class="n">hard</span> <span class="n">nproc</span> <span class="mi">131072</span></code></pre></div>


<h4>修改磁盘预读配置</h4>

<p>在参数文件<code>/etc/rc.d/rc.local</code>中增加下列内容:</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">DELL</span><span class="o">/</span><span class="ss">IBM</span><span class="p">:</span> <span class="n">blockdev</span> <span class="o">--</span><span class="n">setra</span> <span class="mi">16384</span> <span class="o">/</span><span class="n">dev</span><span class="o">/</span><span class="n">sd</span><span class="o">*</span>
<span class="ss">HP</span><span class="p">:</span> <span class="n">blockdev</span> <span class="o">--</span><span class="n">setra</span> <span class="mi">16384</span> <span class="o">/</span><span class="n">dev</span><span class="o">/</span><span class="n">cciss</span><span class="o">/</span><span class="n">c?d?</span><span class="o">*</span></code></pre></div>


<h4>修改系统引导文件</h4>

<p>编辑<code>/boot/grub/menu.lst</code>,Deadline scheduler 用 deadline 算法保证对于既定的 IO 请求以最小的延迟时间，从这一点理解，对于 DSS 应用应该会是很适合的</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">elevator</span><span class="o">=</span><span class="n">deadline</span></code></pre></div>


<h4>启动IPMI服务</h4>

<p>IPMI（Intelligent Platform Management Interface）即智能平台管理接口是使硬件管理具备“智能化”的新一代通用接口标准。如果没有安装相关服务，建议安装</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">service</span> <span class="n">ipmi</span> <span class="n">start</span>
<span class="n">chkconfig</span> <span class="n">ipmi</span> <span class="n">on</span></code></pre></div>


<h4>修改启动配置</h4>

<p>编辑<code>/etc/inittab</code>，修改运行级别为3，多用户命令行模式</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="nb">id</span><span class="p">:</span><span class="mi">3</span><span class="ss">:initdefault</span><span class="p">:</span></code></pre></div>


<h4>关闭selinux并重启机器</h4>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">sed -i <span class="s1">&#39;s/SELINUX=enforcing/SELINUX=disabled/&#39;</span> /etc/selinux/config</code></pre></div>


<p>如果临时关闭，使用</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">setenforce 0</code></pre></div>


<h2>建立数据目录</h2>

<h4>Master以及Standby Master主机</h4>

<p>分区及格式化：</p>

<div class="highlight"><pre><code class="language-go" data-lang="go"><span class="nx">mkfs</span><span class="p">.</span><span class="nx">xfs</span> <span class="o">/</span><span class="nx">dev</span><span class="o">/</span><span class="nx">sda3</span>  <span class="err">#</span> <span class="nx">mkfs</span> <span class="o">-</span><span class="nx">t</span> <span class="nx">xfs</span> <span class="o">/</span><span class="nx">dev</span><span class="o">/</span><span class="nx">sda3</span>
<span class="nx">mkdir</span> <span class="o">-</span><span class="nx">p</span> <span class="o">/</span><span class="nx">data</span><span class="o">/</span><span class="nx">master</span> <span class="err">#</span> <span class="nx">Master数据目录</span></code></pre></div>


<p>在/etc/fstab文件中增加</p>

<div class="highlight"><pre><code class="language-go" data-lang="go"><span class="o">/</span><span class="nx">dev</span><span class="o">/</span><span class="nx">sda3</span> <span class="o">/</span><span class="nx">data</span> <span class="nx">xfs</span> <span class="nx">rw</span><span class="p">,</span><span class="nx">noatime</span><span class="p">,</span><span class="nx">inode64</span><span class="p">,</span><span class="nx">allocsize</span><span class="p">=</span><span class="mi">16</span><span class="nx">m</span> <span class="mi">1</span> <span class="mi">1</span></code></pre></div>


<p>把/data/master 赋予777权限</p>

<div class="highlight"><pre><code class="language-go" data-lang="go"><span class="nx">chmod</span> <span class="o">-</span><span class="nx">R</span> <span class="mi">777</span> <span class="o">/</span><span class="nx">data</span><span class="o">/</span><span class="nx">master</span></code></pre></div>


<h4>Segment主机</h4>

<p>分区及格式化：</p>

<div class="highlight"><pre><code class="language-go" data-lang="go"><span class="nx">mkfs</span><span class="p">.</span><span class="nx">xfs</span>  <span class="o">/</span><span class="nx">dev</span><span class="o">/</span><span class="nx">sda2</span>  <span class="err">#</span> <span class="nx">mkfs</span> <span class="o">-</span><span class="nx">t</span> <span class="nx">xfs</span> <span class="o">/</span><span class="nx">dev</span><span class="o">/</span><span class="nx">sda2</span>
<span class="nx">mkfs</span><span class="p">.</span><span class="nx">xfs</span>  <span class="o">/</span><span class="nx">dev</span><span class="o">/</span><span class="nx">sdb2</span>
<span class="nx">mkdir</span> <span class="o">/</span><span class="nx">data1</span>  <span class="err">#</span> <span class="nx">Segment数据目录</span><span class="err">，</span><span class="nx">可根据实例和分配空间不同规划不同的目录</span>
<span class="nx">mkdir</span> <span class="o">/</span><span class="nx">data2</span></code></pre></div>


<p>在/etc/fstab文件中增加</p>

<div class="highlight"><pre><code class="language-go" data-lang="go"><span class="o">/</span><span class="nx">dev</span><span class="o">/</span><span class="nx">sda2</span> <span class="o">/</span><span class="nx">data1</span> <span class="nx">xfs</span> <span class="nx">rw</span><span class="p">,</span><span class="nx">noatime</span><span class="p">,</span><span class="nx">inode64</span><span class="p">,</span><span class="nx">allocsize</span><span class="p">=</span><span class="mi">16</span><span class="nx">m</span> <span class="mi">1</span> <span class="mi">1</span>
<span class="o">/</span><span class="nx">dev</span><span class="o">/</span><span class="nx">sdb2</span> <span class="o">/</span><span class="nx">data2</span> <span class="nx">xfs</span> <span class="nx">rw</span><span class="p">,</span><span class="nx">noatime</span><span class="p">,</span><span class="nx">inode64</span><span class="p">,</span><span class="nx">allocsize</span><span class="p">=</span><span class="mi">16</span><span class="nx">m</span> <span class="mi">1</span> <span class="mi">1</span></code></pre></div>


<p>把/data/master 赋予777权限</p>

<div class="highlight"><pre><code class="language-go" data-lang="go"><span class="nx">chmod</span> <span class="o">-</span><span class="nx">R</span> <span class="mi">777</span> <span class="o">/</span><span class="nx">data1</span>
<span class="nx">chmod</span> <span class="o">-</span><span class="nx">R</span> <span class="mi">777</span> <span class="o">/</span><span class="nx">data2</span></code></pre></div>


<h2>Master节点安装GreenPlum</h2>

<h4>Master机器运行安装文件</h4>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">unzip greenplum-db-4.1.1.3-build-4-RHEL5-x86_64.zip
/bin/bash greenplum-db-4.1.1.3-build-4-RHEL5-x86_64.bin</code></pre></div>


<p>安装完成后修改root用户home的~/.bashrc配置文件，增加</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">source</span> /usr/local/greenplum-db/greenplum_path.sh</code></pre></div>


<h4>配置hostname文件（用于建立多机信任）</h4>

<p>建议在安装目录下新建gpconfigs目录,包含所有master和segment主机名和别名的文件
多网卡可能如下,<code>hostfile_exkeys</code>:</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">mdw</span>
<span class="n">mdw</span><span class="o">-</span><span class="mi">1</span>
<span class="n">smdw</span>
<span class="n">smdw</span><span class="o">-</span><span class="mi">1</span>
<span class="n">sdw1</span><span class="o">-</span><span class="mi">1</span>
<span class="n">sdw1</span><span class="o">-</span><span class="mi">2</span>
<span class="n">sdw2</span><span class="o">-</span><span class="mi">1</span>
<span class="n">sdw2</span><span class="o">-</span><span class="mi">2</span></code></pre></div>


<p>单网卡可能如下,<code>hostfile_exkeys</code>:</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">mdw</span>
<span class="n">smdw</span>
<span class="n">sdw1</span>
<span class="n">sdw2</span></code></pre></div>


<p>建立<code>all_hosts_only</code>,只包含主机名，不包含各个网段对应的<code>hostname</code>，用于<code>gpssh</code>命令,all_hosts_only:</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">mdw</span>
<span class="n">smdw</span>
<span class="n">sdw1</span>
<span class="n">sdw2</span></code></pre></div>


<h2>建立多机互信</h2>

<p>root用户建立多机信任</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">source</span> /usr/local/greenplum-db/greenplum_path.sh
gpssh-exkeys -f ./hostfile_exkeys</code></pre></div>


<blockquote><p><strong>注意：</strong>对于<code>RHEL6.x</code>版本，建议先关闭<code>OPENSSL_CONF</code>环境变量并设置<code>selinux</code>为<code>disabled</code>再做多机互信
如建立多机信任时出现<code>permission denied(publickey.gssapi-with-mic)</code>或者类似的错误，需要修改每台机器的<code>/etc/ssh/sshd_config</code>文件</p></blockquote>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">RSAAuthentication yes
PubkeyAuthentication yes
AuthorizedKeysFile.ssh/authorized_keys</code></pre></div>


<p>默认使用的22端口，如果22端口没开建议先打开22端口</p>

<h4>建立用户以及用户组</h4>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">gpssh -f ./all_hosts_only
<span class="o">=</span>&gt;groupadd -g <span class="m">3030</span> <span class="nv">gpadmin</span>
<span class="o">=</span>&gt;groupadd -g <span class="m">3040</span> <span class="nv">gpmon</span>
<span class="o">=</span>&gt;useradd -u <span class="m">3030</span> -g gpadmin -m -s /bin/bash <span class="nv">gpadmin</span>
<span class="o">=</span>&gt;useradd -u <span class="m">3040</span> -g gpmon -m -s /bin/bash <span class="nv">gpmon</span>
<span class="o">=</span>&gt;echo gpadmin <span class="p">|</span> passwd  gpadmin --stdin
<span class="o">=</span>&gt;echo gpmon <span class="p">|</span> passwd  gpmon --stdin
<span class="o">=</span>&gt;chown -R gpadmin:gpadmin /data</code></pre></div>


<h4>修改gpadmin用户配置</h4>

<p>使用<code>gpadmin</code>用户操作，对于Master和Standby Master主机，修改 <code>~/.bashrc</code>文件，添加如下内容：</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">source</span> /usr/local/greenplum-db/greenplum_path.sh
<span class="nv">MASTER_DATA_DIRECTORY</span><span class="o">=</span>/data/master/gpseg-1
<span class="nb">export </span>MASTER_DATA_DIRECTORY  <span class="c"># gpstart默认启动的目录</span></code></pre></div>


<p>对于Segment主机，修改 <code>~/.bashrc</code>文件，添加如下内容：</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">source</span> /usr/local/greenplum-db/greenplum_path.sh</code></pre></div>


<h4>gpadmin用户建立多机信任</h4>

<p>使用gpadmin用户在Master主机上操作,提示密码，输入<code>gpadmin</code></p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">gpssh-exkeys -f ./hostfile_exkeys</code></pre></div>


<h2>时钟同步</h2>

<p>所有涉及到的机器之间使用NTP做时钟同步</p>

<h2>其他机器安装GP</h2>

<h4>配置hostname文件</h4>

<p>其他机器的安装主要操作时把安装在Master主机上的GP安装文件打包传到其他各台机器中。因此，需要配置一个hostname文件包含Standbymaster和各台Segment主机，配置文件stby_all_segs内容参考如下：</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">smdw</span>
<span class="n">smdw</span><span class="o">-</span><span class="mi">1</span>
<span class="n">sdw1</span><span class="o">-</span><span class="mi">1</span>
<span class="n">sdw1</span><span class="o">-</span><span class="mi">2</span>
<span class="n">sdw2</span><span class="o">-</span><span class="mi">1</span>
<span class="n">sdw2</span><span class="o">-</span><span class="mi">2</span></code></pre></div>


<h4>并行安装</h4>

<p>安装gzip，在Master主机上，使用root用户操作：</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">chmod</span> <span class="mi">777</span> <span class="o">/</span><span class="n">usr</span><span class="o">/</span><span class="n">local</span>
<span class="n">gpseginstall</span> <span class="o">-</span><span class="n">f</span> <span class="o">.</span><span class="n">/stby_all_segs</span> <span class="o">-</span><span class="nb">p</span> <span class="n">gpadmin</span></code></pre></div>


<h2>系统检查</h2>

<h4>配置检测</h4>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">gpcheck -f /usr/local/greenplum-db/gpconfigs/all_hosts_single -m mdw -s smdw</code></pre></div>


<h4>网络性能检测</h4>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">gpcheckperf -f /usr/local/greenplum-db/gpconfigs/all_net_1 -r N -d /tmp &gt; checknetwork.out
gpcheckperf -f /usr/local/greenplum-db/gpconfigs/all_net_2 -r N -d /tmp &gt; checknetwork.out</code></pre></div>


<h4>磁盘性能检测</h4>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">gpcheckperf -f /usr/local/greenplum-db/gpconfigs/all_hosts_single -r ds -D -d /data1/primary -d /data2/primary -d /data1/mirror -d /data2/mirror &gt; checkio.out</code></pre></div>


<h2>初始化数据库</h2>

<h4>获取初始化配置</h4>

<p>请注意，Greenplum3.x版本和4.x版本的初始化配置文件格式存在差异，配置时建议从 $GPHOME/docs/cli_help/gpconfigs/ 目录中获取样例文件，然后进行修改。</p>

<h4>配置样例</h4>

<p>获取配置文件样例：</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">cp <span class="nv">$GPHOME</span>/docs/cli_help/gpconfigs/gpinitsystem_config  <span class="nv">$GPHOME</span>/gpconfigs/</code></pre></div>


<p>修改配置文件：</p>

<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">ARRAY_NAME</span><span class="o">=</span><span class="s">&quot;EMC Greenplum DW&quot;</span>
<span class="n">SEG_PREFIX</span><span class="o">=</span><span class="n">gpseg</span>
<span class="n">PORT_BASE</span><span class="o">=</span><span class="mi">40000</span>
<span class="n">declare</span> <span class="o">-</span><span class="n">a</span> <span class="n">DATA_DIRECTORY</span><span class="o">=</span><span class="p">(</span><span class="o">/</span><span class="n">data1</span> <span class="o">/</span><span class="n">data1</span> <span class="o">/</span><span class="n">data1</span> <span class="o">/</span><span class="n">data1</span><span class="p">)</span>   <span class="c"># 主实例</span>
<span class="n">MASTER_HOSTNAME</span><span class="o">=</span><span class="n">mdw</span>    <span class="c"># 主机名</span>
<span class="n">MASTER_DIRECTORY</span><span class="o">=/</span><span class="n">data</span><span class="o">/</span><span class="n">master</span>
<span class="n">MASTER_PORT</span><span class="o">=</span><span class="mi">5432</span>
<span class="n">TRUSTED</span> <span class="n">SHELL</span><span class="o">=</span><span class="n">ssh</span>
<span class="n">CHECK_POINT_SEGMENT</span><span class="o">=</span><span class="mi">8</span>
<span class="n">ENCODING</span><span class="o">=</span><span class="n">UNICODE</span>
<span class="n">MIRROR_PORT_BASE</span><span class="o">=</span><span class="mi">50000</span>
<span class="n">REPLICATION_PORT_BASE</span><span class="o">=</span><span class="mi">41000</span>
<span class="n">MIRROR_REPLICATION_PORT_BASE</span><span class="o">=</span><span class="mi">51000</span>
<span class="n">declare</span> <span class="o">-</span><span class="n">a</span> <span class="n">MIRROR_DATA_DIRECTORY</span><span class="o">=</span><span class="p">(</span><span class="o">/</span><span class="n">data2</span> <span class="o">/</span><span class="n">data2</span> <span class="o">/</span><span class="n">data2</span> <span class="o">/</span><span class="n">data2</span><span class="p">)</span>    <span class="c"># 备实例</span>
<span class="n">MACHINE_LIST_FILE</span><span class="o">=/</span><span class="n">usr</span><span class="o">/</span><span class="n">local</span><span class="o">/</span><span class="n">greenplum</span><span class="o">-</span><span class="n">db</span><span class="o">/</span><span class="n">gpconfigs</span><span class="o">/</span><span class="n">all_segs</span>  <span class="c"># segment主机列表文件</span></code></pre></div>


<h4>整理实例列表</h4>

<p>只列出各个网段IP的主机名称，不能添加sdw1、sdw2等</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">sdw1</span><span class="o">-</span><span class="mi">1</span>
<span class="n">sdw1</span><span class="o">-</span><span class="mi">2</span>
<span class="n">sdw2</span><span class="o">-</span><span class="mi">1</span>
<span class="n">sdw2</span><span class="o">-</span><span class="mi">2</span>
<span class="n">sdw3</span><span class="o">-</span><span class="mi">1</span>
<span class="n">sdw3</span><span class="o">-</span><span class="mi">2</span>
<span class="n">sdw4</span><span class="o">-</span><span class="mi">1</span>
<span class="n">sdw4</span><span class="o">-</span><span class="mi">2</span></code></pre></div>


<h4>初始化</h4>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">gpinitsystem</span> <span class="o">-</span><span class="n">c</span> <span class="sr">/usr/</span><span class="n">local</span><span class="o">/</span><span class="n">greenplum</span><span class="o">-</span><span class="n">db</span><span class="o">/</span><span class="n">gpconfigs</span><span class="o">/</span><span class="n">gpinitsystem_config</span> <span class="o">-</span><span class="n">s</span> <span class="n">smdw</span></code></pre></div>


<h4>修改访问权限</h4>

<p>修改Master数据目录（MASTER_DATA_DIRECTORY）下<code>pg_hba.conf</code>文件。需要了解客户实际情况，有多少客户端的IP地址以及角色需要访问数据库。举例如下：</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">host</span>     <span class="n">all</span>         <span class="n">gpadmin</span>         <span class="mi">10</span><span class="o">.</span><span class="mi">32</span><span class="o">.</span><span class="mi">38</span><span class="o">.</span><span class="mi">0</span><span class="o">/</span><span class="mi">16</span>          <span class="n">trust</span></code></pre></div>


<p>IP范围格式：IP 地址/CIDR，如：<code>10.32.38.0/16</code>；<code>255.0.0.0</code>表示 IPv4 CIDR 掩码长度 8，<code>255.255.255.0</code>表示 IPv4 CIDR 掩码长度 24，而 <code>255.255.255.255</code> 表示 CIDR 掩码长度 32；32就表示指定IP，24就表示小子网。
修改完后数据库重载参数文件：</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">gpstop</span> <span class="o">-</span><span class="n">u</span></code></pre></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[常用命令随手记]]></title>
    <link href="http://liyongxin.github.io/blog/2018/05/09/chang-yong-ming-ling-sui-shou-ji/"/>
    <updated>2018-05-09T16:33:42+08:00</updated>
    <id>http://liyongxin.github.io/blog/2018/05/09/chang-yong-ming-ling-sui-shou-ji</id>
    <content type="html"><![CDATA[<ul>
<li><h4>统计系统各类连接数</h4></li>
</ul>


<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">netstat</span> <span class="o">-</span><span class="n">n</span> <span class="o">|</span> <span class="n">awk</span> <span class="s">&#39;/^tcp/ {++S[$NF]} END {for(a in S) print a, S[a]}&#39;</span></code></pre></div>


<p>结果类似如下格式：</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">ESTABLISHED 23
TIME_WAIT 707</code></pre></div>


<ul>
<li><h4>ab命令简单压力测试</h4></li>
</ul>


<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">ab</span> <span class="o">-</span><span class="n">n</span> <span class="mi">50000000</span> <span class="o">-</span><span class="n">c</span> <span class="mi">10</span> <span class="n">http</span><span class="p">:</span><span class="o">//</span><span class="mf">127.0</span><span class="o">.</span><span class="mf">0.1</span><span class="p">:</span><span class="mi">8080</span><span class="o">/</span></code></pre></div>


<ul>
<li><h4>uwsgi reload</h4></li>
</ul>


<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="n">ps</span> <span class="n">afx</span><span class="p">;</span>
<span class="n">kill</span> <span class="o">-</span><span class="n">HUP</span> <span class="err">$</span><span class="n">pid_of_uwsgi</span></code></pre></div>


<ul>
<li><h4>xargs相关</h4></li>
</ul>


<div class="highlight"><pre><code class="language-bash" data-lang="bash">find . -type f -name <span class="s2">&quot;*.jpg&quot;</span> -print <span class="p">|</span> xargs tar -czvf images.tar.gz

<span class="nb">echo</span> <span class="s2">&quot;nameXnameXnameXname&quot;</span> <span class="p">|</span> xargs -dX
name name name name

<span class="nb">echo</span> <span class="s2">&quot;nameXnameXnameXname&quot;</span> <span class="p">|</span> xargs -dX -n2
name name
name name</code></pre></div>


<ul>
<li><h4>多行输入单行输出：</h4></li>
</ul>


<div class="highlight"><pre><code class="language-bash" data-lang="bash">cat test.txt <span class="p">|</span> xargs

a b c d e f g h i j k l m n o p q r s t u v w x y z</code></pre></div>


<ul>
<li><h4>压缩加速</h4></li>
</ul>


<div class="highlight"><pre><code class="language-bash" data-lang="bash">tar --use-compress-program<span class="o">=</span>pigz -xvpf PKG-20180627.tar.gz</code></pre></div>


<ul>
<li><h4>curl发送get或者post请求</h4></li>
</ul>


<div class="highlight"><pre><code class="language-bash" data-lang="bash">curl -H <span class="s2">&quot;Content-Type:application/json&quot;</span> -X POST -d <span class="s1">&#39;{&quot;user&quot;: &quot;admin&quot;, &quot;passwd&quot;:&quot;12345678&quot;}&#39;</span> http://127.0.0.1:8000/login
curl -d <span class="s2">&quot;user=admin&amp;passwd=12345678&quot;</span> http://127.0.0.1:8080/login</code></pre></div>


<ul>
<li><h4>sed 匹配替换</h4></li>
</ul>


<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="c">#/dev/mapper/centos-swap swap                    swap    defaults        0 0</span>
sed -i <span class="s1">&#39;/ swap / s/^\(.*\)$/#\1/g&#39;</span> /etc/fstab</code></pre></div>


<ul>
<li><h4>dd命令</h4></li>
</ul>


<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="c">#创建一个大小为256M的文件</span>
<span class="n">dd</span> <span class="k">if</span><span class="o">=/</span><span class="n">dev</span><span class="o">/</span><span class="n">zero</span> <span class="n">of</span><span class="o">=/</span><span class="n">swapfile</span> <span class="n">bs</span><span class="o">=</span><span class="mi">1024</span> <span class="n">count</span><span class="o">=</span><span class="mi">262144</span>
<span class="c">#测试硬盘的读写速度</span>
<span class="n">dd</span> <span class="k">if</span><span class="o">=/</span><span class="n">dev</span><span class="o">/</span><span class="n">zero</span> <span class="n">bs</span><span class="o">=</span><span class="mi">1024</span> <span class="n">count</span><span class="o">=</span><span class="mi">1000000</span> <span class="n">of</span><span class="o">=/</span><span class="n">root</span><span class="o">/</span><span class="mi">1</span><span class="n">Gb</span><span class="o">.</span><span class="n">file</span>
<span class="n">dd</span> <span class="k">if</span><span class="o">=/</span><span class="n">root</span><span class="o">/</span><span class="mi">1</span><span class="n">Gb</span><span class="o">.</span><span class="n">file</span> <span class="n">bs</span><span class="o">=</span><span class="mi">64</span><span class="n">k</span> <span class="o">|</span> <span class="n">dd</span> <span class="n">of</span><span class="o">=/</span><span class="n">dev</span><span class="o">/</span><span class="n">null</span></code></pre></div>


<ul>
<li><h4>iostat命令</h4></li>
</ul>


<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="c">#安装</span>
<span class="n">yum</span> <span class="n">install</span> <span class="n">sysstat</span>
<span class="c">#测试机器设备读写情况，所有设备，间隔1s，执行10次</span>
<span class="n">iostat</span> <span class="o">-</span><span class="n">d</span> <span class="o">-</span><span class="n">x</span> <span class="mi">1</span> <span class="mi">10</span></code></pre></div>


<ul>
<li><h4>route表操作</h4></li>
</ul>


<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="c">#添加路由</span>
<span class="n">route</span> <span class="n">add</span> <span class="n">default</span> <span class="n">gw</span> <span class="mf">192.168</span><span class="o">.</span><span class="mf">1.1</span>
<span class="n">route</span> <span class="n">add</span> <span class="o">-</span><span class="n">net</span> <span class="mf">10.20</span><span class="o">.</span><span class="mf">30.40</span> <span class="n">netmask</span> <span class="mf">255.255</span><span class="o">.</span><span class="mf">255.248</span> <span class="n">eth0</span>
<span class="c">#删除路由</span>
<span class="n">route</span> <span class="k">del</span> <span class="o">-</span><span class="n">net</span> <span class="mf">10.20</span><span class="o">.</span><span class="mf">30.48</span> <span class="n">netmask</span> <span class="mf">255.255</span><span class="o">.</span><span class="mf">255.248</span> <span class="n">gw</span> <span class="mf">10.20</span><span class="o">.</span><span class="mf">30.41</span></code></pre></div>


<ul>
<li><h4>tail 取输出结果的最后几行</h4></li>
</ul>


<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="p">[</span><span class="n">root</span><span class="nd">@cloud</span><span class="o">-</span><span class="n">cn</span><span class="o">-</span><span class="n">master</span><span class="o">-</span><span class="mi">1</span> <span class="o">~</span><span class="p">]</span><span class="c"># `which kubectl` get po -n alauda-system |grep alauda-redis</span>
<span class="n">alauda</span><span class="o">-</span><span class="n">redis</span><span class="o">-</span><span class="mi">67</span><span class="n">d89d58db</span><span class="o">-</span><span class="mi">2</span><span class="n">gqdd</span>                 <span class="mi">1</span><span class="o">/</span><span class="mi">1</span>       <span class="n">Running</span>   <span class="mi">0</span>          <span class="mi">1</span><span class="n">d</span>
<span class="n">alauda</span><span class="o">-</span><span class="n">redis</span><span class="o">-</span><span class="n">cluster</span><span class="o">-</span><span class="mi">1</span><span class="o">-</span><span class="mi">56489</span><span class="n">c6c87</span><span class="o">-</span><span class="mi">4</span><span class="n">nwdc</span>       <span class="mi">1</span><span class="o">/</span><span class="mi">1</span>       <span class="n">Running</span>   <span class="mi">0</span>          <span class="mi">14</span><span class="n">d</span>
<span class="n">alauda</span><span class="o">-</span><span class="n">redis</span><span class="o">-</span><span class="n">cluster</span><span class="o">-</span><span class="mi">2</span><span class="o">-</span><span class="mi">75</span><span class="n">fb5cb78b</span><span class="o">-</span><span class="n">h5l82</span>       <span class="mi">1</span><span class="o">/</span><span class="mi">1</span>       <span class="n">Running</span>   <span class="mi">0</span>          <span class="mi">14</span><span class="n">d</span>
<span class="n">alauda</span><span class="o">-</span><span class="n">redis</span><span class="o">-</span><span class="n">cluster</span><span class="o">-</span><span class="mi">3</span><span class="o">-</span><span class="mi">8697</span><span class="n">f4746f</span><span class="o">-</span><span class="mi">645</span><span class="n">sj</span>       <span class="mi">1</span><span class="o">/</span><span class="mi">1</span>       <span class="n">Running</span>   <span class="mi">1</span>          <span class="mi">14</span><span class="n">d</span>
<span class="n">alauda</span><span class="o">-</span><span class="n">redis</span><span class="o">-</span><span class="n">cluster</span><span class="o">-</span><span class="mi">4</span><span class="o">-</span><span class="mi">7677</span><span class="n">cbcd8d</span><span class="o">-</span><span class="n">z8pvb</span>       <span class="mi">1</span><span class="o">/</span><span class="mi">1</span>       <span class="n">Running</span>   <span class="mi">0</span>          <span class="mi">14</span><span class="n">d</span>
<span class="n">alauda</span><span class="o">-</span><span class="n">redis</span><span class="o">-</span><span class="n">cluster</span><span class="o">-</span><span class="mi">5</span><span class="o">-</span><span class="mi">564</span><span class="n">b7444d7</span><span class="o">-</span><span class="mi">8</span><span class="n">z5dh</span>       <span class="mi">1</span><span class="o">/</span><span class="mi">1</span>       <span class="n">Running</span>   <span class="mi">1</span>          <span class="mi">63</span><span class="n">d</span>
<span class="n">alauda</span><span class="o">-</span><span class="n">redis</span><span class="o">-</span><span class="n">cluster</span><span class="o">-</span><span class="mi">6</span><span class="o">-</span><span class="mi">7955</span><span class="n">ffc758</span><span class="o">-</span><span class="n">cp59h</span>       <span class="mi">1</span><span class="o">/</span><span class="mi">1</span>       <span class="n">Running</span>   <span class="mi">1</span>          <span class="mi">63</span><span class="n">d</span>
<span class="p">[</span><span class="n">root</span><span class="nd">@cloud</span><span class="o">-</span><span class="n">cn</span><span class="o">-</span><span class="n">master</span><span class="o">-</span><span class="mi">1</span> <span class="o">~</span><span class="p">]</span><span class="c"># `which kubectl` get po -n alauda-system |grep alauda-redis |tail -n1</span>
<span class="n">alauda</span><span class="o">-</span><span class="n">redis</span><span class="o">-</span><span class="n">cluster</span><span class="o">-</span><span class="mi">6</span><span class="o">-</span><span class="mi">7955</span><span class="n">ffc758</span><span class="o">-</span><span class="n">cp59h</span>       <span class="mi">1</span><span class="o">/</span><span class="mi">1</span>       <span class="n">Running</span>   <span class="mi">1</span>          <span class="mi">63</span><span class="n">d</span>
<span class="p">[</span><span class="n">root</span><span class="nd">@cloud</span><span class="o">-</span><span class="n">cn</span><span class="o">-</span><span class="n">master</span><span class="o">-</span><span class="mi">1</span> <span class="o">~</span><span class="p">]</span><span class="c"># `which kubectl` get po -n alauda-system |grep alauda-redis |tail -n2</span>
<span class="n">alauda</span><span class="o">-</span><span class="n">redis</span><span class="o">-</span><span class="n">cluster</span><span class="o">-</span><span class="mi">5</span><span class="o">-</span><span class="mi">564</span><span class="n">b7444d7</span><span class="o">-</span><span class="mi">8</span><span class="n">z5dh</span>       <span class="mi">1</span><span class="o">/</span><span class="mi">1</span>       <span class="n">Running</span>   <span class="mi">1</span>          <span class="mi">63</span><span class="n">d</span>
<span class="n">alauda</span><span class="o">-</span><span class="n">redis</span><span class="o">-</span><span class="n">cluster</span><span class="o">-</span><span class="mi">6</span><span class="o">-</span><span class="mi">7955</span><span class="n">ffc758</span><span class="o">-</span><span class="n">cp59h</span>       <span class="mi">1</span><span class="o">/</span><span class="mi">1</span>       <span class="n">Running</span>   <span class="mi">1</span>          <span class="mi">63</span><span class="n">d</span></code></pre></div>


<ul>
<li><h4>awk 指定行号输出</h4></li>
</ul>


<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="c">#输出最后一行</span>
<span class="p">[</span><span class="n">root</span><span class="nd">@cloud</span><span class="o">-</span><span class="n">cn</span><span class="o">-</span><span class="n">master</span><span class="o">-</span><span class="mi">1</span> <span class="o">~</span><span class="p">]</span><span class="c"># kubectl get po -n alauda-system |grep alauda-redis |awk &#39;END{print $1}&#39;</span>
<span class="c">#输出指定行</span>
<span class="p">[</span><span class="n">root</span><span class="nd">@cloud</span><span class="o">-</span><span class="n">cn</span><span class="o">-</span><span class="n">master</span><span class="o">-</span><span class="mi">1</span> <span class="o">~</span><span class="p">]</span><span class="c"># kubectl get po -n alauda-system |grep alauda-redis |awk &#39;NR==1{print $1}&#39;</span></code></pre></div>


<ul>
<li><h4>sed 删除指定行</h4></li>
</ul>


<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="c">#删除前两行，输出剩下的行</span>
<span class="p">[</span><span class="n">root</span><span class="nd">@cloud</span><span class="o">-</span><span class="n">cn</span><span class="o">-</span><span class="n">master</span><span class="o">-</span><span class="mi">1</span> <span class="o">~</span><span class="p">]</span><span class="c"># `which kubectl` get po -n alauda-system |grep alauda-redis |sed 1,2d</span>
<span class="c">#删除最后一行</span>
<span class="p">[</span><span class="n">root</span><span class="nd">@cloud</span><span class="o">-</span><span class="n">cn</span><span class="o">-</span><span class="n">master</span><span class="o">-</span><span class="mi">1</span> <span class="o">~</span><span class="p">]</span><span class="c"># `which kubectl` get po -n alauda-system |grep alauda-redis |sed &#39;$&#39;d</span></code></pre></div>


<ul>
<li><h4>find</h4>

<p>find命令是根据文件的属性进行查找，如文件名，文件大小，所有者，所属组，是否为空，访问时间，修改时间等</p></li>
</ul>


<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="c">#在/tmp目录下查找大于10000字节并在最后2分钟内修改的文件</span>
<span class="p">[</span><span class="n">root</span><span class="nd">@cloud</span><span class="o">-</span><span class="n">cn</span><span class="o">-</span><span class="n">ake</span> <span class="o">~</span><span class="p">]</span><span class="c"># find /tmp -size +10000c -and -mtime +2</span>

<span class="c">#查找当前文件系统中的所有目录并排序</span>
<span class="p">[</span><span class="n">root</span><span class="nd">@cloud</span><span class="o">-</span><span class="n">cn</span><span class="o">-</span><span class="n">ake</span> <span class="o">~</span><span class="p">]</span><span class="c"># find . -type d | sort</span>
<span class="c">#查找`/var/log`目录下大于200M的以`.log`结尾的文件并删除掉</span>
<span class="p">[</span><span class="n">root</span><span class="nd">@yxli</span><span class="o">-</span><span class="n">onebox</span> <span class="n">docker</span><span class="p">]</span><span class="c"># find  /var/log/  -name  &quot;*.log&quot; -size +200M -type f -exec rm {} \;</span></code></pre></div>


<ul>
<li><h4>grep</h4>

<p>grep是根据文件的内容进行查找，会对文件的每一行按照给定的模式(patter)进行匹配查找</p></li>
</ul>


<div class="highlight"><pre><code class="language-python" data-lang="python"><span class="c">#显示/usr/src目录下的文件(包含子目录)包含magic的行</span>
<span class="p">[</span><span class="n">root</span><span class="nd">@cloud</span><span class="o">-</span><span class="n">cn</span><span class="o">-</span><span class="n">ake</span> <span class="o">~</span><span class="p">]</span><span class="c"># grep -r magic /usr/src</span>
<span class="c">#正则表达式</span>
<span class="n">grep</span> <span class="o">-</span><span class="n">E</span> <span class="s">&quot;\&lt;(root|gao|uer1)\&gt;&quot;</span> <span class="o">/</span><span class="n">etc</span><span class="o">/</span><span class="n">passwd</span></code></pre></div>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CentOS使用GreenPlum定时加载HDFS数据文件]]></title>
    <link href="http://liyongxin.github.io/blog/2018/05/03/greenplumding-shi-jia-zai-hdfsshu-ju-wen-jian/"/>
    <updated>2018-05-03T14:08:00+08:00</updated>
    <id>http://liyongxin.github.io/blog/2018/05/03/greenplumding-shi-jia-zai-hdfsshu-ju-wen-jian</id>
    <content type="html"><![CDATA[<p>最近有个场景，数据会定时写入hdfs，需要GP从hdfs中将数据载入。网上关于gp连接hdfs的介绍不是很多，实现的过程中走了很多弯路。
整个过程大概分为4步：</p>

<ul>
<li><strong>安装JDK</strong> ：java必备；</li>
<li><strong>安装必要的PHD软件包</strong> ：安装phd中必要的组件，让GPDB主机作为Hadoop的client；</li>
<li><strong>设置GPDB</strong> ：配置gpconfig；</li>
<li><strong>定时任务</strong> ：利用cron任务实现定时加载数据文件；</li>
</ul>


<h3>安装JDK</h3>

<p>推荐版本是1.7.x，注意需要在所有节点进行安装，安装完成后添加以下内容到<code>gpadmin</code>用户对应的<code>.bashrc</code>文件中</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">export</span> <span class="no">JAVA_HOME</span><span class="o">=</span><span class="sr">/opt/</span><span class="n">jdk1</span><span class="o">.</span><span class="mi">7</span><span class="o">.</span><span class="mo">0_45</span></code></pre></div>


<p>如果还会提示找不到<code>Error: JAVA_HOME is not set and could not be found.</code>尝试将上述命令添加到<code>/etc/environment中</code>.
编辑<code>/etc/profile</code>文件，添加如下内容：</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">export </span><span class="nv">JAVA_HOME</span><span class="o">=</span>/opt/jdk1.7.0_45
<span class="nb">export </span><span class="nv">CLASSPATH</span><span class="o">=</span>.:<span class="nv">$JAVA_HOME</span>/jre/lib/rt.jar:<span class="nv">$JAVA_HOME</span>/lib/dt.jar:<span class="nv">$JAVA_HOME</span>/lib/tools.jar
<span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="nv">$PATH</span>:<span class="nv">$JAVA_HOME</span>/bin</code></pre></div>


<p>最后执行如下命令验证安装是否成功：</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">source</span> /etc/profile
java -version</code></pre></div>


<h3>安装必要的PHD软件包</h3>

<p>默认安装完GP后，无法直接ipc连接远程hdfs，官方推荐安装phd的一些软件，当然拷贝一份hadoop的包到本地也可以，目的都是让GPDB中的主机作为hadoop的客户端，能进行hdfs的访问。
所有的软件均可在phd的安装包中获得，我下载的是PHD-2.0.1.0-148版本，整个安装包大概805MB，以下rpm是需要顺序安装的：</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='go'><span class='line'><span class="nx">rpm</span> <span class="o">-</span><span class="nx">ivh</span> <span class="nx">bigtop</span><span class="o">-</span><span class="nx">jsvc</span><span class="o">-</span><span class="mf">1.0.15</span><span class="nx">_gphd_3_0_1_0</span><span class="o">-</span><span class="mf">148.</span><span class="nx">x86_64</span><span class="p">.</span><span class="nx">rpm</span>
</span><span class='line'><span class="nx">rpm</span> <span class="o">-</span><span class="nx">ivh</span> <span class="nx">bigtop</span><span class="o">-</span><span class="nx">utils</span><span class="o">-</span><span class="mf">0.4.0</span><span class="nx">_gphd_3_0_1_0</span><span class="o">-</span><span class="mf">148.</span><span class="nx">noarch</span><span class="p">.</span><span class="nx">rpm</span>
</span><span class='line'><span class="nx">rpm</span> <span class="o">-</span><span class="nx">ivh</span> <span class="nx">zookeeper</span><span class="o">-</span><span class="mf">3.4.5</span><span class="nx">_gphd_3_0_1_0</span><span class="o">-</span><span class="mf">148.</span><span class="nx">noarch</span><span class="p">.</span><span class="nx">rpm</span>
</span><span class='line'><span class="nx">yum</span> <span class="o">-</span><span class="nx">y</span> <span class="nx">install</span> <span class="nx">nc</span>
</span><span class='line'><span class="nx">rpm</span> <span class="o">-</span><span class="nx">ivh</span> <span class="nx">hadoop</span><span class="o">-</span><span class="mf">2.2.0</span><span class="nx">_gphd_3_0_1_0</span><span class="o">-</span><span class="mf">148.</span><span class="nx">x86_64</span><span class="p">.</span><span class="nx">rpm</span>
</span><span class='line'><span class="nx">rpm</span> <span class="o">-</span><span class="nx">ivh</span> <span class="nx">hadoop</span><span class="o">-</span><span class="nx">yarn</span><span class="o">-</span><span class="mf">2.2.0</span><span class="nx">_gphd_3_0_1_0</span><span class="o">-</span><span class="mf">148.</span><span class="nx">x86_64</span><span class="p">.</span><span class="nx">rpm</span>
</span><span class='line'><span class="nx">rpm</span> <span class="o">-</span><span class="nx">ivh</span> <span class="nx">hadoop</span><span class="o">-</span><span class="nx">mapreduce</span><span class="o">-</span><span class="mf">2.2.0</span><span class="nx">_gphd_3_0_1_0</span><span class="o">-</span><span class="mf">148.</span><span class="nx">x86_64</span><span class="p">.</span><span class="nx">rpm</span>
</span><span class='line'><span class="nx">rpm</span> <span class="o">-</span><span class="nx">ivh</span> <span class="nx">hadoop</span><span class="o">-</span><span class="nx">hdfs</span><span class="o">-</span><span class="mf">2.2.0</span><span class="nx">_gphd_3_0_1_0</span><span class="o">-</span><span class="mf">148.</span><span class="nx">x86_64</span><span class="p">.</span><span class="nx">rpm</span>
</span></code></pre></td></tr></table></div></figure>


<p>安装gphd的时候需要nc，所以先yum安装一下。</p>

<blockquote><p><strong>注意：</strong>官方说所有的segment节点需要安装这些软件，实际过程中整个GPDB中的机器都需要安装才可以运行，否则会提示无法加载class的错误。</p></blockquote>

<h3>设置GPDB</h3>

<p>在gp中使用gpadmin用户进行设置以下两个配置项，具体的值需要根据官方的资料进行匹配</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash">gpconfig -c gp_hadoop_home -v <span class="s2">&quot;&#39;/usr/lib/gphd&#39;&quot;</span>
gpconfig -c gp_hadoop_target_version -v <span class="s2">&quot;&#39;gphd-2.0&#39;&quot;</span></code></pre></div>




<!--more-->


<p>其他hadoop版本以及target对应的值可参考下图：</p>

<table>
   <tr>
      <td>Hadoop Distribution</td>
      <td>Version</td>
      <td>gp_hadoop_target_version</td>
   </tr>
   <tr>
      <td>Pivotal HD</td>
      <td>Pivotal HD 2.0Pivotal HD 1.01</td>
      <td>gphd-2.0</td>
   </tr>
   <tr>
      <td>Greenplum HD</td>
      <td>Greenplum HD 1.2</td>
      <td>gphd-1.2</td>
   </tr>
   <tr>
      <td></td>
      <td>Greenplum HD 1.1</td>
      <td>gphd-1.1 (default)</td>
   </tr>
   <tr>
      <td>Cloudera</td>
      <td>CDH 5.2, 5.3</td>
      <td>cdh5</td>
   </tr>
   <tr>
      <td></td>
      <td>CDH 5.0, 5.1</td>
      <td>cdh4.1</td>
   </tr>
   <tr>
      <td></td>
      <td>CDH 4.12 - CDH 4.7</td>
      <td>cdh4.1</td>
   </tr>
   <tr>
      <td>Hortonworks Data Platform</td>
      <td>HDP 2.1, 2.2</td>
      <td>hdp2</td>
   </tr>
   <tr>
      <td>MapR3</td>
      <td>MapR 4.x</td>
      <td>gpmr-1.2</td>
   </tr>
   <tr>
      <td></td>
      <td>MapR 1.x, 2.x, 3.x</td>
      <td>gpmr-1.0</td>
   </tr>
   <tr>
      <td></td>
   </tr>
</table>


<blockquote><p><strong>注意：</strong>设置完成之后需要完全重启GPDB，官方提示只需gpstop -u重新load即可，实测中会报错找不到java command。
测试hdfs命令</p></blockquote>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="o">[</span><span class="n">gpadmin</span><span class="vi">@mdw</span> <span class="n">opt</span><span class="o">]</span><span class="err">$</span> <span class="n">hdfs</span> <span class="n">dfs</span> <span class="o">-</span><span class="n">ls</span> <span class="ss">hdfs</span><span class="p">:</span><span class="sr">//</span><span class="mi">10</span><span class="o">.</span><span class="mi">110</span><span class="o">.</span><span class="mi">17</span><span class="o">.</span><span class="mi">181</span><span class="p">:</span><span class="mi">8020</span><span class="o">/</span>
<span class="no">Found</span> <span class="mi">13</span> <span class="n">items</span>
<span class="n">drwxrwxrwx</span> <span class="o">-</span> <span class="n">root</span> <span class="n">supergroup</span> <span class="mi">0</span> <span class="mi">2016</span><span class="o">-</span><span class="mo">01</span><span class="o">-</span><span class="mi">19</span> <span class="mi">14</span><span class="p">:</span><span class="mi">53</span> <span class="ss">hdfs</span><span class="p">:</span><span class="sr">//</span><span class="mi">10</span><span class="o">.</span><span class="mi">110</span><span class="o">.</span><span class="mi">17</span><span class="o">.</span><span class="mi">181</span><span class="p">:</span><span class="mi">8020</span><span class="o">/</span><span class="n">hbase</span>
<span class="n">drwxrwxrwx</span> <span class="o">-</span> <span class="n">root</span> <span class="n">supergroup</span> <span class="mi">0</span> <span class="mi">2016</span><span class="o">-</span><span class="mo">01</span><span class="o">-</span><span class="mi">21</span> <span class="mi">08</span><span class="p">:</span><span class="mi">34</span> <span class="ss">hdfs</span><span class="p">:</span><span class="sr">//</span><span class="mi">10</span><span class="o">.</span><span class="mi">110</span><span class="o">.</span><span class="mi">17</span><span class="o">.</span><span class="mi">181</span><span class="p">:</span><span class="mi">8020</span><span class="o">/</span><span class="n">liyongxin</span>
<span class="o">-</span><span class="n">rwxrwxrwx</span> <span class="mi">2</span> <span class="n">root</span> <span class="n">supergroup</span> <span class="mi">10</span> <span class="mi">2016</span><span class="o">-</span><span class="mo">01</span><span class="o">-</span><span class="mi">19</span> <span class="mi">14</span><span class="p">:</span><span class="mi">49</span> <span class="ss">hdfs</span><span class="p">:</span><span class="sr">//</span><span class="mi">10</span><span class="o">.</span><span class="mi">110</span><span class="o">.</span><span class="mi">17</span><span class="o">.</span><span class="mi">181</span><span class="p">:</span><span class="mi">8020</span><span class="o">/</span><span class="n">lyx</span><span class="o">.</span><span class="n">dat</span>
<span class="o">-</span><span class="n">rwxrwxrwx</span> <span class="mi">3</span> <span class="n">gpadmin</span> <span class="n">supergroup</span> <span class="mi">16</span> <span class="mi">2016</span><span class="o">-</span><span class="mo">01</span><span class="o">-</span><span class="mi">19</span> <span class="mi">19</span><span class="p">:</span><span class="mi">54</span> <span class="ss">hdfs</span><span class="p">:</span><span class="sr">//</span><span class="mi">10</span><span class="o">.</span><span class="mi">110</span><span class="o">.</span><span class="mi">17</span><span class="o">.</span><span class="mi">181</span><span class="p">:</span><span class="mi">8020</span><span class="o">/</span><span class="n">lyx</span><span class="o">.</span><span class="n">txt</span>
<span class="n">drwxrwxrwx</span> <span class="o">-</span> <span class="n">root</span> <span class="n">supergroup</span> <span class="mi">0</span> <span class="mi">2016</span><span class="o">-</span><span class="mo">01</span><span class="o">-</span><span class="mi">21</span> <span class="mi">16</span><span class="p">:</span><span class="mi">16</span> <span class="ss">hdfs</span><span class="p">:</span><span class="sr">//</span><span class="mi">10</span><span class="o">.</span><span class="mi">110</span><span class="o">.</span><span class="mi">17</span><span class="o">.</span><span class="mi">181</span><span class="p">:</span><span class="mi">8020</span><span class="o">/</span><span class="n">mpp_data</span>
<span class="n">drwxrwxrwx</span> <span class="o">-</span> <span class="n">root</span> <span class="n">supergroup</span> <span class="mi">0</span> <span class="mi">2016</span><span class="o">-</span><span class="mo">01</span><span class="o">-</span><span class="mi">21</span> <span class="mi">16</span><span class="p">:</span><span class="mi">16</span> <span class="ss">hdfs</span><span class="p">:</span><span class="sr">//</span><span class="mi">10</span><span class="o">.</span><span class="mi">110</span><span class="o">.</span><span class="mi">17</span><span class="o">.</span><span class="mi">181</span><span class="p">:</span><span class="mi">8020</span><span class="o">/</span><span class="n">mpp_tmp</span>
<span class="n">drwxrwxrwx</span> <span class="o">-</span> <span class="n">root</span> <span class="n">supergroup</span> <span class="mi">0</span> <span class="mi">2016</span><span class="o">-</span><span class="mo">01</span><span class="o">-</span><span class="mi">20</span> <span class="mi">14</span><span class="p">:</span><span class="mi">20</span> <span class="ss">hdfs</span><span class="p">:</span><span class="sr">//</span><span class="mi">10</span><span class="o">.</span><span class="mi">110</span><span class="o">.</span><span class="mi">17</span><span class="o">.</span><span class="mi">181</span><span class="p">:</span><span class="mi">8020</span><span class="o">/</span><span class="n">tmp</span>
<span class="n">drwxrwxrwx</span> <span class="o">-</span> <span class="n">root</span> <span class="n">supergroup</span> <span class="mi">0</span> <span class="mi">2016</span><span class="o">-</span><span class="mo">01</span><span class="o">-</span><span class="mi">21</span> <span class="mi">09</span><span class="p">:</span><span class="mi">45</span> <span class="ss">hdfs</span><span class="p">:</span><span class="sr">//</span><span class="mi">10</span><span class="o">.</span><span class="mi">110</span><span class="o">.</span><span class="mi">17</span><span class="o">.</span><span class="mi">181</span><span class="p">:</span><span class="mi">8020</span><span class="o">/</span><span class="n">user</span></code></pre></div>


<p>将数据文件put到hdfs</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="o">[</span><span class="n">gpadmin</span><span class="vi">@mdw</span> <span class="n">opt</span><span class="o">]</span><span class="err">$</span> <span class="n">cat</span> <span class="n">lyx</span><span class="o">.</span><span class="n">txt</span>
<span class="n">east</span><span class="p">,</span><span class="mi">15</span>
<span class="n">west</span><span class="p">,</span><span class="mi">25</span>
<span class="o">[</span><span class="n">gpadmin</span><span class="vi">@mdw</span> <span class="n">opt</span><span class="o">]</span><span class="err">$</span> <span class="n">hdfs</span> <span class="n">dfs</span> <span class="o">-</span><span class="n">put</span> <span class="n">lyx</span><span class="o">.</span><span class="n">txt</span> <span class="ss">hdfs</span><span class="p">:</span><span class="sr">//</span><span class="mi">10</span><span class="o">.</span><span class="mi">110</span><span class="o">.</span><span class="mi">17</span><span class="o">.</span><span class="mi">181</span><span class="p">:</span><span class="mi">8020</span><span class="o">/</span><span class="n">mpp_data</span><span class="o">/</span><span class="mi">1</span><span class="o">.</span><span class="n">txt</span>
<span class="o">[</span><span class="n">gpadmin</span><span class="vi">@mdw</span> <span class="n">opt</span><span class="o">]</span><span class="err">$</span> <span class="n">hdfs</span> <span class="n">dfs</span> <span class="o">-</span><span class="n">ls</span> <span class="ss">hdfs</span><span class="p">:</span><span class="sr">//</span><span class="mi">10</span><span class="o">.</span><span class="mi">110</span><span class="o">.</span><span class="mi">17</span><span class="o">.</span><span class="mi">181</span><span class="p">:</span><span class="mi">8020</span><span class="o">/</span><span class="n">mpp_data</span><span class="o">/</span>
<span class="no">Found</span> <span class="mi">1</span> <span class="n">items</span>
<span class="o">-</span><span class="n">rw</span><span class="o">-</span><span class="n">r</span><span class="o">--</span><span class="n">r</span><span class="o">--</span> <span class="mi">3</span> <span class="n">gpadmin</span> <span class="n">supergroup</span> <span class="mi">16</span> <span class="mi">2016</span><span class="o">-</span><span class="mo">01</span><span class="o">-</span><span class="mi">21</span> <span class="mi">17</span><span class="p">:</span><span class="mo">00</span> <span class="ss">hdfs</span><span class="p">:</span><span class="sr">//</span><span class="mi">10</span><span class="o">.</span><span class="mi">110</span><span class="o">.</span><span class="mi">17</span><span class="o">.</span><span class="mi">181</span><span class="p">:</span><span class="mi">8020</span><span class="o">/</span><span class="n">mpp_data</span><span class="o">/</span><span class="n">lyx</span><span class="o">.</span><span class="n">txt</span></code></pre></div>


<p>建立外部表并测试,查询数据</p>

<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">lyx</span><span class="o">=</span><span class="c1"># select * from test_hdfs_ext1;</span>
 <span class="n">age</span> <span class="o">|</span> <span class="nb">name</span>
<span class="o">------+------</span>
 <span class="n">east</span> <span class="o">|</span> <span class="mi">15</span>
 <span class="n">west</span> <span class="o">|</span> <span class="mi">25</span>
<span class="p">(</span><span class="mi">2</span> <span class="n">rows</span><span class="p">)</span></code></pre></div>


<h3>脚本定时加载数据文件</h3>

<p>由于文件会不定时的写入到hdfs目录中，建立外部表采用通配符匹配的方式，但如果在执行加载的过程中有文件写入到目录，会将该文件一并加载到gp中，这样就无法实现对已加载的文件的记录，所以脚本中先将当前已有文件剪切到一个临时目录，加载完成后全部删除临时目录中文件，大致内容如下：</p>

<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">database</span><span class="o">=</span>postgres
<span class="nv">tablename</span><span class="o">=</span>hdfs
<span class="nv">columns</span><span class="o">=</span><span class="s1">&#39;age text, name text&#39;</span>
<span class="c">#echo $hdfsurl$filepath</span>
<span class="nv">hdfs_nns</span><span class="o">=(</span><span class="s1">&#39;10.110.17.181:8020&#39;</span> <span class="s1">&#39;10.110.17.182:8020&#39;</span><span class="o">)</span>
<span class="nv">tmp_path</span><span class="o">=</span>mpp_tmp
<span class="nv">data_path</span><span class="o">=</span>mpp_data
<span class="k">function</span> get_hdfs_url<span class="o">(){</span>
 <span class="nv">standby</span><span class="o">=</span><span class="s2">&quot;ls: Operation category READ is not supported in state standby&quot;</span><span class="p">;</span>
 <span class="nv">res</span><span class="o">=</span>hdfs_nns<span class="o">[</span>0<span class="o">]</span>
 <span class="k">for</span> var in <span class="k">${</span><span class="nv">hdfs_nns</span><span class="p">[@]</span><span class="k">}</span><span class="p">;</span>
     <span class="k">do</span>
         <span class="nv">res</span><span class="o">=</span><span class="sb">`</span>hdfs dfs -ls hdfs://<span class="nv">$var</span>/ 2&gt;<span class="p">&amp;</span>1<span class="sb">`</span><span class="p">;</span>
         <span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$res&quot;</span> <span class="o">=</span> <span class="s2">&quot;$standby&quot;</span> <span class="o">]</span><span class="p">;</span><span class="k">then</span>
            <span class="nv">res</span><span class="o">=</span><span class="s1">&#39;&#39;</span>
         <span class="k">else</span>
            <span class="nv">res</span><span class="o">=</span><span class="nv">$var</span>
            <span class="nb">break</span>
<span class="nb">         </span><span class="k">fi</span>
     <span class="k">done</span>
 <span class="nb">echo</span> <span class="nv">$res</span><span class="p">;</span>
<span class="o">}</span>
<span class="nv">hdfs_url</span><span class="o">=</span><span class="k">$(</span>get_hdfs_url<span class="k">)</span>

<span class="k">function</span> is_file_exist<span class="o">(){</span>
 hdfs dfs -ls hdfs://<span class="nv">$hdfs_url</span>/<span class="nv">$data_path</span>/ <span class="p">|</span> awk <span class="s1">&#39;$1 ~ /Found/ {print 1}&#39;</span>
<span class="o">}</span>

<span class="nv">fss</span><span class="o">=</span><span class="k">$(</span>is_file_exist<span class="k">)</span>
<span class="k">if</span> <span class="o">[</span> <span class="s2">&quot;$fss&quot;</span> !<span class="o">=</span> <span class="s2">&quot;1&quot;</span> <span class="o">]</span><span class="p">;</span>
 <span class="k">then</span>
 <span class="nb">echo</span> <span class="s1">&#39;no data file&#39;</span>
 <span class="nb">exit </span>1
<span class="k">fi</span>
hdfs dfs -mv hdfs://<span class="nv">$hdfs_url</span>/<span class="nv">$data_path</span>/*.txt hdfs://<span class="nv">$hdfs_url</span>/<span class="nv">$tmp_path</span>/
psql -U gpadmin -d <span class="nv">$database</span> <span class="s">&lt;&lt; EOF</span>
<span class="s">create external table hdfs_ext ($columns) location(&#39;gphdfs://$hdfs_url/$tmp_path/*.txt&#39;) format &#39;text&#39; (delimiter &#39;,&#39;);</span>
<span class="s">insert into $tablename select * from hdfs_ext;</span>
<span class="s">drop external table hdfs_ext;</span>
<span class="s">EOF</span>
<span class="c">#drop external table hdfs_ext;</span>
hdfs dfs -rm -r hdfs://<span class="nv">$hdfs_url</span>/<span class="nv">$tmp_path</span>/*.txt

<span class="c">#hdfs dfs -ls $hdfsurl$filepath | awk &#39;BEGIN{cur=0;filenames[cur]=0;all=0;}</span>
<span class="c"># $1 ~ /Found/ {all=$2;print all;}</span>
<span class="c"># $8 ~ /hdfs*/ {print $8;</span>
<span class="c"># filenames[cur]=$8;cur++;print &quot;cur=&quot;+&#39;cur&#39;;</span>
<span class="c"># if(all==cur){</span>
 <span class="c">#external tables</span>
 <span class="c"># psql -U gpadmin -d lyx &lt;&lt; EOF</span>
 <span class="c"># CREATE SCHEMA ;</span>
 <span class="c">#EOF</span>
<span class="c"># print &quot;over,all=&quot;&#39;all&#39;}</span>
<span class="c">#}&#39;</span></code></pre></div>


<p>最后放入crontab中即可实现定时增量的处理</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[马克飞象-markdown]]></title>
    <link href="http://liyongxin.github.io/blog/2018/04/24/qs-sheng-ji-zu-jian-liu-cheng/"/>
    <updated>2018-04-24T00:00:00+08:00</updated>
    <id>http://liyongxin.github.io/blog/2018/04/24/qs-sheng-ji-zu-jian-liu-cheng</id>
    <content type="html"><![CDATA[<p><strong>马克飞象</strong>是一款专为印象笔记（Evernote）打造的Markdown编辑器，通过精心的设计与技术实现，配合印象笔记强大的存储和同步功能，带来前所未有的书写体验。特点概述：</p>

<ul>
<li><strong>功能丰富</strong> ：支持高亮代码块、<em>LaTeX</em> 公式、流程图，本地图片以及附件上传，甚至截图粘贴，工作学习好帮手；</li>
<li><strong>得心应手</strong> ：简洁高效的编辑器，提供<a href="http://maxiang.info/client_zh">桌面客户端</a>以及<a href="https://chrome.google.com/webstore/detail/kidnkfckhbdkfgbicccmdggmpgogehop">离线Chrome App</a>，支持移动端 Web；</li>
<li><strong>深度整合</strong> ：支持选择笔记本和添加标签，支持从印象笔记跳转编辑，轻松管理。</li>
</ul>


<h2>Markdown简介</h2>

<blockquote><p>Markdown 是一种轻量级标记语言，它允许人们使用易读易写的纯文本格式编写文档，然后转换成格式丰富的HTML页面。    —— <a href="https://zh.wikipedia.org/wiki/Markdown">维基百科</a></p></blockquote>

<p>正如您在阅读的这份文档，它使用简单的符号标识不同的标题，将某些文字标记为<strong>粗体</strong>或者<em>斜体</em>，创建一个<a href="http://www.example.com">链接</a>或一个脚注<sup id="fnref:1"><a href="#fn:1" rel="footnote">1</a></sup>。下面列举了几个高级功能，更多语法请按<code>Cmd + /</code>查看帮助。</p>

<h3>代码块</h3>

<figure class='code'><figcaption><span>linenos:false</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class='python'><span class='line'><span class="nd">@requires_authorization</span>
</span><span class='line'><span class="k">def</span> <span class="nf">somefunc</span><span class="p">(</span><span class="n">param1</span><span class="o">=</span><span class="s">&#39;&#39;</span><span class="p">,</span> <span class="n">param2</span><span class="o">=</span><span class="mi">0</span><span class="p">):</span>
</span><span class='line'>    <span class="sd">&#39;&#39;&#39;A docstring&#39;&#39;&#39;</span>
</span><span class='line'>    <span class="k">if</span> <span class="n">param1</span> <span class="o">&gt;</span> <span class="n">param2</span><span class="p">:</span> <span class="c"># interesting</span>
</span><span class='line'>        <span class="k">print</span> <span class="s">&#39;Greater&#39;</span>
</span><span class='line'>    <span class="k">return</span> <span class="p">(</span><span class="n">param2</span> <span class="o">-</span> <span class="n">param1</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="ow">or</span> <span class="bp">None</span>
</span><span class='line'><span class="k">class</span> <span class="nc">SomeClass</span><span class="p">:</span>
</span><span class='line'>    <span class="k">pass</span>
</span><span class='line'><span class="o">&gt;&gt;&gt;</span> <span class="n">message</span> <span class="o">=</span> <span class="s">&#39;&#39;&#39;interpreter</span>
</span><span class='line'><span class="s">... prompt&#39;&#39;&#39;</span>
</span></code></pre></td></tr></table></div></figure>


<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='ruby'><span class='line'><span class="n">curl</span> <span class="o">-</span><span class="n">L</span> <span class="ss">https</span><span class="p">:</span><span class="sr">//</span><span class="n">raw</span><span class="o">.</span><span class="n">githubusercontent</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">pyenv</span><span class="o">/</span><span class="n">pyenv</span><span class="o">-</span><span class="n">installer</span><span class="o">/</span><span class="n">master</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">pyenv</span><span class="o">-</span><span class="n">installer</span> <span class="o">|</span> <span class="n">bash</span>
</span></code></pre></td></tr></table></div></figure>




<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">curl</span> <span class="o">-</span><span class="n">L</span> <span class="ss">https</span><span class="p">:</span><span class="sr">//</span><span class="n">raw</span><span class="o">.</span><span class="n">githubusercontent</span><span class="o">.</span><span class="n">com</span><span class="o">/</span><span class="n">pyenv</span><span class="o">/</span><span class="n">pyenv</span><span class="o">-</span><span class="n">installer</span><span class="o">/</span><span class="n">master</span><span class="o">/</span><span class="n">bin</span><span class="o">/</span><span class="n">pyenv</span><span class="o">-</span><span class="n">installer</span> <span class="o">|</span> <span class="n">bash</span></code></pre></div>




<!--more-->




<div class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nb">export </span><span class="nv">PATH</span><span class="o">=</span><span class="s2">&quot;~/.pyenv/bin:$PATH&quot;</span>
<span class="nb">eval</span> <span class="s2">&quot;$(pyenv init -)&quot;</span>
<span class="nb">eval</span> <span class="s2">&quot;$(pyenv virtualenv-init -)&quot;</span></code></pre></div>




<div class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="vi">@requires_authorization</span>
<span class="k">def</span> <span class="nf">somefunc</span><span class="p">(</span><span class="n">param1</span><span class="o">=</span><span class="s1">&#39;&#39;</span><span class="p">,</span> <span class="n">param2</span><span class="o">=</span><span class="mi">0</span><span class="p">):</span>
    <span class="s1">&#39;&#39;&#39;A docstring&#39;&#39;&#39;</span>
    <span class="k">if</span> <span class="n">param1</span> <span class="o">&gt;</span> <span class="ss">param2</span><span class="p">:</span> <span class="c1"># interesting</span>
        <span class="nb">print</span> <span class="s1">&#39;Greater&#39;</span>
    <span class="k">return</span> <span class="p">(</span><span class="n">param2</span> <span class="o">-</span> <span class="n">param1</span> <span class="o">+</span> <span class="mi">1</span><span class="p">)</span> <span class="ow">or</span> <span class="no">None</span>
<span class="k">class</span> <span class="nc">SomeClass</span><span class="p">:</span>
    <span class="n">pass</span>
<span class="o">&gt;&gt;&gt;</span> <span class="n">message</span> <span class="o">=</span> <span class="s1">&#39;&#39;&#39;interpreter</span>
<span class="s1">... prompt&#39;&#39;&#39;</span></code></pre></div>


<h3>LaTeX 公式</h3>

<p>可以创建行内公式，例如 $\Gamma(n) = (n-1)!\quad\forall n\in\mathbb N$。或者块级公式：</p>

<p>$$  x = \dfrac{-b \pm \sqrt{b<sup>2</sup> - 4ac}}{2a} $$</p>

<h3>表格</h3>

<table>
<thead>
<tr>
<th style="text-align:left;"> Item      </th>
<th style="text-align:right;">    Value </th>
<th style="text-align:center;"> Qty  </th>
</tr>
</thead>
<tbody>
<tr>
<td style="text-align:left;"> Computer  </td>
<td style="text-align:right;"> 1600 USD </td>
<td style="text-align:center;">  5   </td>
</tr>
<tr>
<td style="text-align:left;"> Phone     </td>
<td style="text-align:right;">   12 USD </td>
<td style="text-align:center;">  12  </td>
</tr>
<tr>
<td style="text-align:left;"> Pipe      </td>
<td style="text-align:right;">    1 USD </td>
<td style="text-align:center;"> 234  </td>
</tr>
</tbody>
</table>


<h3>复选框</h3>

<p>使用 <code>- [ ]</code> 和 <code>- [x]</code> 语法可以创建复选框，实现 todo-list 等功能。例如：</p>

<ul>
<li>[x] 已完成事项</li>
<li>[ ] 待办事项1</li>
<li>[ ] 待办事项2</li>
</ul>


<blockquote><p><strong>注意：</strong>目前支持尚不完全，在印象笔记中勾选复选框是无效、不能同步的，所以必须在<strong>马克飞象</strong>中修改 Markdown 原文才可生效。下个版本将会全面支持。</p></blockquote>

<h2>印象笔记相关</h2>

<h3>笔记本和标签</h3>

<p><strong>马克飞象</strong>增加了<code>@(笔记本)[标签A|标签B]</code>语法, 以选择笔记本和添加标签。 <strong>绑定账号后</strong>， 输入<code>(</code>自动会出现笔记本列表，请从中选择。</p>

<h3>笔记标题</h3>

<p><strong>马克飞象</strong>会自动使用文档内出现的第一个标题作为笔记标题。例如本文，就是第一行的 <code>欢迎使用马克飞象</code>。</p>

<h3>快捷编辑</h3>

<p>保存在印象笔记中的笔记，右上角会有一个红色的编辑按钮，点击后会回到<strong>马克飞象</strong>中打开并编辑该笔记。</p>

<blockquote><p><strong>注意：</strong>目前用户在印象笔记中单方面做的任何修改，马克飞象是无法自动感知和更新的。所以请务必回到马克飞象编辑。</p></blockquote>

<h3>数据同步</h3>

<p><strong>马克飞象</strong>通过<strong>将Markdown原文以隐藏内容保存在笔记中</strong>的精妙设计，实现了对Markdown的存储和再次编辑。既解决了其他产品只是单向导出HTML的单薄，又规避了服务端存储Markdown带来的隐私安全问题。这样，服务端仅作为对印象笔记 API调用和数据转换之用。</p>

<blockquote><p><strong>隐私声明：用户所有的笔记数据，均保存在印象笔记中。马克飞象不存储用户的任何笔记数据。</strong></p></blockquote>

<h3>离线存储</h3>

<p><strong>马克飞象</strong>使用浏览器离线存储将内容实时保存在本地，不必担心网络断掉或浏览器崩溃。为了节省空间和避免冲突，已同步至印象笔记并且不再修改的笔记将删除部分本地缓存，不过依然可以随时通过<code>文档管理</code>打开。</p>

<blockquote><p><strong>注意：</strong>虽然浏览器存储大部分时候都比较可靠，但印象笔记作为专业云存储，更值得信赖。以防万一，<strong>请务必经常及时同步到印象笔记</strong>。</p></blockquote>

<h2>编辑器相关</h2>

<h3>设置</h3>

<p>右侧系统菜单（快捷键<code>Cmd + M</code>）的<code>设置</code>中，提供了界面字体、字号、自定义CSS、vim/emacs 键盘模式等高级选项。</p>

<h3>快捷键</h3>

<p>帮助    <code>Cmd + /</code>
同步文档    <code>Cmd + S</code>
创建文档    <code>Cmd + Opt + N</code>
最大化编辑器    <code>Cmd + Enter</code>
预览文档 <code>Cmd + Opt + Enter</code>
文档管理    <code>Cmd + O</code>
系统菜单    <code>Cmd + M</code></p>

<p>加粗    <code>Cmd + B</code>
插入图片    <code>Cmd + G</code>
插入链接    <code>Cmd + L</code>
提升标题    <code>Cmd + H</code></p>

<h2>关于收费</h2>

<p><strong>马克飞象</strong>为新用户提供 10 天的试用期，试用期过后需要<a href="maxiang.info/vip.html">续费</a>才能继续使用。未购买或者未及时续费，将不能同步新的笔记。之前保存过的笔记依然可以编辑。</p>

<h2>反馈与建议</h2>

<ul>
<li>微博：<a href="http://weibo.com/u/2788354117">@马克飞象</a>，<a href="http://weibo.com/ggock" title="开发者个人账号">@GGock</a></li>
<li>邮箱：<a href="&#x6d;&#x61;&#x69;&#108;&#116;&#x6f;&#x3a;&#x68;&#117;&#x73;&#x74;&#103;&#111;&#99;&#107;&#64;&#103;&#x6d;&#x61;&#x69;&#108;&#46;&#x63;&#111;&#109;">&#104;&#117;&#115;&#116;&#x67;&#x6f;&#x63;&#107;&#64;&#x67;&#x6d;&#97;&#105;&#108;&#46;&#99;&#x6f;&#x6d;</a></li>
</ul>


<hr />

<p>感谢阅读这份帮助文档。请点击右上角，绑定印象笔记账号，开启全新的记录与分享体验吧。</p>

<p>HTML，但是不支持某些标签和属性，例如id，这就导致<code>脚注</code>和<code>TOC</code>无法正常点击。</p>
<div class="footnotes">
<hr/>
<ol>
<li id="fn:1">
<p>这是一个示例脚注。请查阅 <a href="https://github.com/fletcher/MultiMarkdown/wiki/MultiMarkdown-Syntax-Guide#footnotes">MultiMarkdown 文档</a> 关于脚注的说明。 <strong>限制：</strong> 印象笔记的笔记内容使用 [ENML][5] 格式，基于 HTML，但是不支持某些标签和属性，例如id，这就导致<code>脚注</code>和<code>TOC</code>无法正常点击。<a href="#fnref:1" rev="footnote">&#8617;</a></p></li>
</ol>
</div>

]]></content>
  </entry>
  
</feed>
